;; test-Aa-count.scm
(check-expect (count 'a '()) 0)
(check-expect (count 'a '(a)) 1)
(check-expect (count 'a '(b)) 0)
(check-expect (count 'a '(a a)) 2)
(check-expect (count 'a '(a b)) 1)
(check-expect (count 'a '(b a)) 1)
(check-expect (count 'a '(b b)) 0)
(check-expect (count 'a '(a (a))) 1)
(check-expect (count 'a '(a (b))) 1)
(check-expect (count 'a '(b (a))) 0)
(check-expect (count 'a '(b (b))) 0)
(check-expect (count 'a '((a) (a))) 0)
(check-expect (count 'a '((a) (b))) 0)
(check-expect (count 'a '((b) (a))) 0)
(check-expect (count 'a '((b) (b))) 0)
(check-expect (count 'a '((a a))) 0)
(check-expect (count 'a '((a b))) 0)
(check-expect (count 'a '((b a))) 0)
(check-expect (count 'a '((b b))) 0)
(check-expect (count 'a '(1 b a (c a))) 1)
(check-expect (count 'a '(0 (-1) -1 (-1) ((((5) #f 2 (1 -5 0)) (0) 1 -5) 5 () ((-2 e 1 #f a 1) ()) #t) -1 ((#t ((#t b -5 b 0 (2 d a)) (1 (d) 1) 0) (() (c) b 0)) () -2 -2) #t)) 0)
(check-expect (count 'a '(-1 c a -2 a (b 0 -2 1 0) d #t)) 2)
(check-expect (count 'a '(0 (#t b (0 #t)) -1 () (a (((0) e e e 1 a) d -2 -2 (-2 () e) ()) (d)))) 0)
(check-expect (count 'a '(-1 5 b d 2 (b d) 1 2 ((((-5) #f 2 -1) c)))) 0)
(check-expect (count 'a '((0 -2) (b () (b -1 -5 -1 (1 a #t)) 5 #t c) #f ((-2 2 1) b 5 a) 1 a -2 e d 1 b)) 1)
(check-expect (count 'a '(-5 -5 0 -2 -2 1 c -5 c () d)) 0)
(check-expect (count 'a '(((0 e 1 (0 d (1 0 -2 (a (b 5))) ((1 #f #f) #f () #t -5 -5) (-5 c c #f b)) c) b d #t) ((#t 5 (d -2 2 5)) (a e (((5)) -2 e 5)) a) e 1 -5 (d))) 0)
(check-expect (count 'a '(1 b 0)) 0)
(check-expect (count 'a '(() -2 a -2 (0 ()) e)) 1)
(check-expect (count 'a '((a (5 2 d ((-5 #f) -2) 2) d e () 1) -5 (e (() -2 2 (() 1 #f 2 () ((2 1 -5 b c c) a e d (b (2 -1 -1) -1 (0 ()) ())))) (e -1 d e) d) #t 0 ((0 (5 #t -5 5) ((2 e) (() -2 (#f (#f 2) (-2 #t c 2 -1 ((-5 c) -5 (1 (#f -2) a (a (5))) #t (((-5) 5 #t #f) (2 (5 #f ((-5 5) a (1 2 -1 ((0 (5)) 2 (e 1 c) #f #t ())) d) a (-2 -2 -2 (1 (b c) (#f -2 #t #f #t 0) 1) a (0 1 (() ((a e 5 #f b -1) (-5 b) ((-1 5 (-5) 0) e 5 -2 () (((#f 2 d 2 -1 -5) c (c (() d 2)) (a () (-1 (5 () ((b () ((2 5 -2 ((1 #f (5) a)) #t #f) 2) e -1 0)) ()) #t c a) (-5 -5 b 5 2) (d e (-1) -5) -5)) -1 0 1)) (() 1) 2 ((((c)) #f) (d) -2 a e (a (#f -2 (-1 (#f ((a (#f (-1))) 5 #t 5 ())) e d) 2 e) (b (5 b -1 c (b (e (c) c))) ((d) (((5) (b d e (-1 ((-5 -1) 5 #f) -2 1) a) 1 0) 1) c) b ())))) ((e (2 (() (1 2 (c c)) 2) 5) #t -1) d 2) (a d e) 5 (#t -5 c)) #f a)))) #t c))) (-1 -5 (-2 (5 b ((b ((-2 () ((#t 5 2 () d ()) (-2 e (d (#f #f (e (#f (b (#f a d ((#t #f b)) 5) -2 a (e (((c 2) 1 2 e d (a #t)) (#f b -5 5 b -5) ((2 (2 e e 5 () -2) #t) (#t 0 #t #f (-5 0 (-1 c 0 e) () ()) (-5)))) ((((d ((-5 (b (-1 0 (b 0 #t ((-5 #f a ((-1 -1 (#f a (()) d (-1 0 #t b d) a) #t -5) -1 d (c a ((((e 5 2 5)) #f #t c c) c 0 (-1) -1 (-1)) ((((5) #f 2 (1 -5 0)) (0) 1 -5) 5 () ((-2 e 1 #f a 1) ()) #t) -1) ((#t ((#t b -5 b 0 (2 d a)) (1 (d) 1) 0) (() (c) b 0)) () -2 -2)) #t) -1) -1 c) a)) -2 a (b 0 -2 1 0)) d #t) c 0)) (#t b (0 #t)) -1) () (a (((0) e e e 1 a) d -2 -2 (-2 () e) ()) (d)) (5) b d))) 2 (b d) 1) 2 ((((-5) #f 2 -1) c))) 2 (0 -2)) (b () (b -1 -5 -1 (1 a #t)) 5 #t c) #f)) ((-2 2 1) b 5 a))))) 1 a -2 e d) 1) b c -5 -5) 0 -2) -2) 1 c -5) c ()) d 1) ((0 e 1 (0 d (1 0 -2 (a (b 5))) ((1 #f #f) #f () #t -5 -5) (-5 c c #f b)) c) b d #t) ((#t 5 (d -2 2 5)) (a e (((5)) -2 e 5)) a) e 1) -5 (d) a 1 b)) 1)
(check-expect (count 'a '(d () -2 a)) 1)
(check-expect (count 'a '((0 ()) e -1 (a (5 2 d ((-5 #f) -2) 2) d e () 1) -5 (e (() -2 2 (() 1 #f 2 () ((2 1 -5 b c c) a e d (b (2 -1 -1) -1 (0 ()) ())))) (e -1 d e) d) #t 0 ((0 (5 #t -5 5) ((2 e) (() -2 (#f (#f 2) (-2 #t c 2 -1 ((-5 c) -5 (1 (#f -2) a (a (5))) #t (((-5) 5 #t #f) (2 (5 #f ((-5 5) a (1 2 -1 ((0 (5)) 2 (e 1 c) #f #t ())) d) a (-2 -2 -2 (1 (b c) (#f -2 #t #f #t 0) 1) a (0 1 (() ((a e 5 #f b -1) (-5 b) ((-1 5 (-5) 0) e 5 -2 () (((#f 2 d 2 -1 -5) c (c (() d 2)) (a () (-1 (5 () ((b () ((2 5 -2 ((1 #f (5) a)) #t #f) 2) e -1 0)) ()) #t c a) (-5 -5 b 5 2) (d e (-1) -5) -5)) -1 0 1)) (() 1) 2 ((((c)) #f) (d) -2 a e (a (#f -2 (-1 (#f ((a (#f (-1))) 5 #t 5 ())) e d) 2 e) (b (5 b -1 c (b (e (c) c))) ((d) (((5) (b d e (-1 ((-5 -1) 5 #f) -2 1) a) 1 0) 1) c) b ())))) ((e (2 (() (1 2 (c c)) 2) 5) #t -1) d 2) (a d e) 5 (#t -5 c)) #f a)))) #t c))) (-1 -5 (-2 (5 b ((b ((-2 () ((#t 5 2 () d ()) (-2 e (d (#f #f (e (#f (b (#f a d ((#t #f b)) 5) -2 a (e (((c 2) 1 2 e d (a #t)) (#f b -5 5 b -5) ((2 (2 e e 5 () -2) #t) (#t 0 #t #f (-5 0 (-1 c 0 e) () ()) (-5)))) ((((d ((-5 (b (-1 0 (b 0 #t ((-5 #f a ((-1 -1 (#f a (()) d (-1 0 #t b d) a) #t -5) -1 d (c a ((((e 5 2 5)) #f #t c c) c 0 (-1) -1 (-1)) ((((5) #f 2 (1 -5 0)) (0) 1 -5) 5 () ((-2 e 1 #f a 1) ()) #t) -1) ((#t ((#t b -5 b 0 (2 d a)) (1 (d) 1) 0) (() (c) b 0)) () -2 -2)) #t) -1) -1 c) a)) -2 a (b 0 -2 1 0)) d #t) c 0)) (#t b (0 #t)) -1) () (a (((0) e e e 1 a) d -2 -2 (-2 () e) ()) (d)) (5) b d))) 2 (b d) 1) 2 ((((-5) #f 2 -1) c))) 2 (0 -2)) (b () (b -1 -5 -1 (1 a #t)) 5 #t c) #f)) ((-2 2 1) b 5 a))))) 1 a -2 e d) 1) b c -5 -5) 0 -2) -2) 1 c -5) c ()) d 1) ((0 e 1 (0 d (1 0 -2 (a (b 5))) ((1 #f #f) #f () #t -5 -5) (-5 c c #f b)) c) b d #t) ((#t 5 (d -2 2 5)) (a e (((5)) -2 e 5)) a) e 1) -5)) 0)
(check-expect (count 'a '(-1 d a)) 1)
(check-expect (count 'a '(b 0 d () -2 a -2 (0 ()) e)) 1)
(check-expect (count 'a '((a (5 2 d ((-5 #f) -2) 2) d e () 1) -5 (e (() -2 2 (() 1 #f 2 () ((2 1 -5 b c c) a e d (b (2 -1 -1) -1 (0 ()) ())))) (e -1 d e) d) #t 0 ((0 (5 #t -5 5) ((2 e) (() -2 (#f (#f 2) (-2 #t c 2 -1 ((-5 c) -5 (1 (#f -2) a (a (5))) #t (((-5) 5 #t #f) (2 (5 #f ((-5 5) a (1 2 -1 ((0 (5)) 2 (e 1 c) #f #t ())) d) a (-2 -2 -2 (1 (b c) (#f -2 #t #f #t 0) 1) a (0 1 (() ((a e 5 #f b -1) (-5 b) ((-1 5 (-5) 0) e 5 -2 () (((#f 2 d 2 -1 -5) c (c (() d 2)) (a () (-1 (5 () ((b () ((2 5 -2 ((1 #f (5) a)) #t #f) 2) e -1 0)) ()) #t c a) (-5 -5 b 5 2) (d e (-1) -5) -5)) -1 0 1)) (() 1) 2 ((((c)) #f) (d) -2 a e (a (#f -2 (-1 (#f ((a (#f (-1))) 5 #t 5 ())) e d) 2 e) (b (5 b -1 c (b (e (c) c))) ((d) (((5) (b d e (-1 ((-5 -1) 5 #f) -2 1) a) 1 0) 1) c) b ())))) ((e (2 (() (1 2 (c c)) 2) 5) #t -1) d 2) (a d e) 5 (#t -5 c)) #f a)))) #t c))) (-1 -5 (-2 (5 b ((b ((-2 () ((#t 5 2 () d ()) (-2 e (d (#f #f (e (#f (b (#f a d ((#t #f b)) 5) -2 a (e (((c 2) 1 2 e d (a #t)) (#f b -5 5 b -5) ((2 (2 e e 5 () -2) #t) (#t 0 #t #f (-5 0 (-1 c 0 e) () ()) (-5)))) ((((d ((-5 (b (-1 0 (b 0 #t ((-5 #f a ((-1 -1 (#f a (()) d (-1 0 #t b d) a) #t -5) -1 d (c a ((((e 5 2 5)) #f #t c c) c 0 (-1) -1 (-1)) ((((5) #f 2 (1 -5 0)) (0) 1 -5) 5 () ((-2 e 1 #f a 1) ()) #t) -1) ((#t ((#t b -5 b 0 (2 d a)) (1 (d) 1) 0) (() (c) b 0)) () -2 -2)) #t) -1) -1 c) a)) -2 a (b 0 -2 1 0)) d #t) c 0)) (#t b (0 #t)) -1) () (a (((0) e e e 1 a) d -2 -2 (-2 () e) ()) (d)) (5) b d))) 2 (b d) 1) 2 ((((-5) #f 2 -1) c))) 2 (0 -2)) (b () (b -1 -5 -1 (1 a #t)) 5 #t c) #f)) ((-2 2 1) b 5 a))))) 1 a -2 e d) 1) b c -5 -5) 0 -2) -2) 1 c -5) c ()) d 1) ((0 e 1 (0 d (1 0 -2 (a (b 5))) ((1 #f #f) #f () #t -5 -5) (-5 c c #f b)) c) b d #t) ((#t 5 (d -2 2 5)) (a e (((5)) -2 e 5)) a) e 1) -5 (d) a 1 b)) 1)

;; test-Ab-countall.scm
(check-expect (countall 'a '()) 0)
(check-expect (countall 'a '(a)) 1)
(check-expect (countall 'a '(b)) 0)
(check-expect (countall 'a '(a a)) 2)
(check-expect (countall 'a '(a b)) 1)
(check-expect (countall 'a '(b a)) 1)
(check-expect (countall 'a '(b b)) 0)
(check-expect (countall 'a '(a (a))) 2)
(check-expect (countall 'a '(a (b))) 1)
(check-expect (countall 'a '(b (a))) 1)
(check-expect (countall 'a '(b (b))) 0)
(check-expect (countall 'a '((a) (a))) 2)
(check-expect (countall 'a '((a) (b))) 1)
(check-expect (countall 'a '((b) (a))) 1)
(check-expect (countall 'a '((b) (b))) 0)
(check-expect (countall 'a '((a a))) 2)
(check-expect (countall 'a '((a b))) 1)
(check-expect (countall 'a '((b a))) 1)
(check-expect (countall 'a '((b b))) 0)
(check-expect (countall 'a '(1 b a (c a))) 2)
(check-expect (countall 'a '(0 (-1) -1 (-1) ((((5) #f 2 (1 -5 0)) (0) 1 -5) 5 () ((-2 e 1 #f a 1) ()) #t) -1 ((#t ((#t b -5 b 0 (2 d a)) (1 (d) 1) 0) (() (c) b 0)) () -2 -2) #t)) 2)
(check-expect (countall 'a '(-1 c a -2 a (b 0 -2 1 0) d #t)) 2)
(check-expect (countall 'a '(0 (#t b (0 #t)) -1 () (a (((0) e e e 1 a) d -2 -2 (-2 () e) ()) (d)))) 2)
(check-expect (countall 'a '(-1 5 b d 2 (b d) 1 2 ((((-5) #f 2 -1) c)))) 0)
(check-expect (countall 'a '((0 -2) (b () (b -1 -5 -1 (1 a #t)) 5 #t c) #f ((-2 2 1) b 5 a) 1 a -2 e d 1 b)) 3)
(check-expect (countall 'a '(-5 -5 0 -2 -2 1 c -5 c () d)) 0)
(check-expect (countall 'a '(((0 e 1 (0 d (1 0 -2 (a (b 5))) ((1 #f #f) #f () #t -5 -5) (-5 c c #f b)) c) b d #t) ((#t 5 (d -2 2 5)) (a e (((5)) -2 e 5)) a) e 1 -5 (d))) 3)
(check-expect (countall 'a '(1 b 0)) 0)
(check-expect (countall 'a '(() -2 a -2 (0 ()) e)) 1)
(check-expect (countall 'a '((a (5 2 d ((-5 #f) -2) 2) d e () 1) -5 (e (() -2 2 (() 1 #f 2 () ((2 1 -5 b c c) a e d (b (2 -1 -1) -1 (0 ()) ())))) (e -1 d e) d) #t 0 ((0 (5 #t -5 5) ((2 e) (() -2 (#f (#f 2) (-2 #t c 2 -1 ((-5 c) -5 (1 (#f -2) a (a (5))) #t (((-5) 5 #t #f) (2 (5 #f ((-5 5) a (1 2 -1 ((0 (5)) 2 (e 1 c) #f #t ())) d) a (-2 -2 -2 (1 (b c) (#f -2 #t #f #t 0) 1) a (0 1 (() ((a e 5 #f b -1) (-5 b) ((-1 5 (-5) 0) e 5 -2 () (((#f 2 d 2 -1 -5) c (c (() d 2)) (a () (-1 (5 () ((b () ((2 5 -2 ((1 #f (5) a)) #t #f) 2) e -1 0)) ()) #t c a) (-5 -5 b 5 2) (d e (-1) -5) -5)) -1 0 1)) (() 1) 2 ((((c)) #f) (d) -2 a e (a (#f -2 (-1 (#f ((a (#f (-1))) 5 #t 5 ())) e d) 2 e) (b (5 b -1 c (b (e (c) c))) ((d) (((5) (b d e (-1 ((-5 -1) 5 #f) -2 1) a) 1 0) 1) c) b ())))) ((e (2 (() (1 2 (c c)) 2) 5) #t -1) d 2) (a d e) 5 (#t -5 c)) #f a)))) #t c))) (-1 -5 (-2 (5 b ((b ((-2 () ((#t 5 2 () d ()) (-2 e (d (#f #f (e (#f (b (#f a d ((#t #f b)) 5) -2 a (e (((c 2) 1 2 e d (a #t)) (#f b -5 5 b -5) ((2 (2 e e 5 () -2) #t) (#t 0 #t #f (-5 0 (-1 c 0 e) () ()) (-5)))) ((((d ((-5 (b (-1 0 (b 0 #t ((-5 #f a ((-1 -1 (#f a (()) d (-1 0 #t b d) a) #t -5) -1 d (c a ((((e 5 2 5)) #f #t c c) c 0 (-1) -1 (-1)) ((((5) #f 2 (1 -5 0)) (0) 1 -5) 5 () ((-2 e 1 #f a 1) ()) #t) -1) ((#t ((#t b -5 b 0 (2 d a)) (1 (d) 1) 0) (() (c) b 0)) () -2 -2)) #t) -1) -1 c) a)) -2 a (b 0 -2 1 0)) d #t) c 0)) (#t b (0 #t)) -1) () (a (((0) e e e 1 a) d -2 -2 (-2 () e) ()) (d)) (5) b d))) 2 (b d) 1) 2 ((((-5) #f 2 -1) c))) 2 (0 -2)) (b () (b -1 -5 -1 (1 a #t)) 5 #t c) #f)) ((-2 2 1) b 5 a))))) 1 a -2 e d) 1) b c -5 -5) 0 -2) -2) 1 c -5) c ()) d 1) ((0 e 1 (0 d (1 0 -2 (a (b 5))) ((1 #f #f) #f () #t -5 -5) (-5 c c #f b)) c) b d #t) ((#t 5 (d -2 2 5)) (a e (((5)) -2 e 5)) a) e 1) -5 (d) a 1 b)) 37)
(check-expect (countall 'a '(d () -2 a)) 1)
(check-expect (countall 'a '((0 ()) e -1 (a (5 2 d ((-5 #f) -2) 2) d e () 1) -5 (e (() -2 2 (() 1 #f 2 () ((2 1 -5 b c c) a e d (b (2 -1 -1) -1 (0 ()) ())))) (e -1 d e) d) #t 0 ((0 (5 #t -5 5) ((2 e) (() -2 (#f (#f 2) (-2 #t c 2 -1 ((-5 c) -5 (1 (#f -2) a (a (5))) #t (((-5) 5 #t #f) (2 (5 #f ((-5 5) a (1 2 -1 ((0 (5)) 2 (e 1 c) #f #t ())) d) a (-2 -2 -2 (1 (b c) (#f -2 #t #f #t 0) 1) a (0 1 (() ((a e 5 #f b -1) (-5 b) ((-1 5 (-5) 0) e 5 -2 () (((#f 2 d 2 -1 -5) c (c (() d 2)) (a () (-1 (5 () ((b () ((2 5 -2 ((1 #f (5) a)) #t #f) 2) e -1 0)) ()) #t c a) (-5 -5 b 5 2) (d e (-1) -5) -5)) -1 0 1)) (() 1) 2 ((((c)) #f) (d) -2 a e (a (#f -2 (-1 (#f ((a (#f (-1))) 5 #t 5 ())) e d) 2 e) (b (5 b -1 c (b (e (c) c))) ((d) (((5) (b d e (-1 ((-5 -1) 5 #f) -2 1) a) 1 0) 1) c) b ())))) ((e (2 (() (1 2 (c c)) 2) 5) #t -1) d 2) (a d e) 5 (#t -5 c)) #f a)))) #t c))) (-1 -5 (-2 (5 b ((b ((-2 () ((#t 5 2 () d ()) (-2 e (d (#f #f (e (#f (b (#f a d ((#t #f b)) 5) -2 a (e (((c 2) 1 2 e d (a #t)) (#f b -5 5 b -5) ((2 (2 e e 5 () -2) #t) (#t 0 #t #f (-5 0 (-1 c 0 e) () ()) (-5)))) ((((d ((-5 (b (-1 0 (b 0 #t ((-5 #f a ((-1 -1 (#f a (()) d (-1 0 #t b d) a) #t -5) -1 d (c a ((((e 5 2 5)) #f #t c c) c 0 (-1) -1 (-1)) ((((5) #f 2 (1 -5 0)) (0) 1 -5) 5 () ((-2 e 1 #f a 1) ()) #t) -1) ((#t ((#t b -5 b 0 (2 d a)) (1 (d) 1) 0) (() (c) b 0)) () -2 -2)) #t) -1) -1 c) a)) -2 a (b 0 -2 1 0)) d #t) c 0)) (#t b (0 #t)) -1) () (a (((0) e e e 1 a) d -2 -2 (-2 () e) ()) (d)) (5) b d))) 2 (b d) 1) 2 ((((-5) #f 2 -1) c))) 2 (0 -2)) (b () (b -1 -5 -1 (1 a #t)) 5 #t c) #f)) ((-2 2 1) b 5 a))))) 1 a -2 e d) 1) b c -5 -5) 0 -2) -2) 1 c -5) c ()) d 1) ((0 e 1 (0 d (1 0 -2 (a (b 5))) ((1 #f #f) #f () #t -5 -5) (-5 c c #f b)) c) b d #t) ((#t 5 (d -2 2 5)) (a e (((5)) -2 e 5)) a) e 1) -5)) 36)
(check-expect (countall 'a '(-1 d a)) 1)
(check-expect (countall 'a '(b 0 d () -2 a -2 (0 ()) e)) 1)
(check-expect (countall 'a '((a (5 2 d ((-5 #f) -2) 2) d e () 1) -5 (e (() -2 2 (() 1 #f 2 () ((2 1 -5 b c c) a e d (b (2 -1 -1) -1 (0 ()) ())))) (e -1 d e) d) #t 0 ((0 (5 #t -5 5) ((2 e) (() -2 (#f (#f 2) (-2 #t c 2 -1 ((-5 c) -5 (1 (#f -2) a (a (5))) #t (((-5) 5 #t #f) (2 (5 #f ((-5 5) a (1 2 -1 ((0 (5)) 2 (e 1 c) #f #t ())) d) a (-2 -2 -2 (1 (b c) (#f -2 #t #f #t 0) 1) a (0 1 (() ((a e 5 #f b -1) (-5 b) ((-1 5 (-5) 0) e 5 -2 () (((#f 2 d 2 -1 -5) c (c (() d 2)) (a () (-1 (5 () ((b () ((2 5 -2 ((1 #f (5) a)) #t #f) 2) e -1 0)) ()) #t c a) (-5 -5 b 5 2) (d e (-1) -5) -5)) -1 0 1)) (() 1) 2 ((((c)) #f) (d) -2 a e (a (#f -2 (-1 (#f ((a (#f (-1))) 5 #t 5 ())) e d) 2 e) (b (5 b -1 c (b (e (c) c))) ((d) (((5) (b d e (-1 ((-5 -1) 5 #f) -2 1) a) 1 0) 1) c) b ())))) ((e (2 (() (1 2 (c c)) 2) 5) #t -1) d 2) (a d e) 5 (#t -5 c)) #f a)))) #t c))) (-1 -5 (-2 (5 b ((b ((-2 () ((#t 5 2 () d ()) (-2 e (d (#f #f (e (#f (b (#f a d ((#t #f b)) 5) -2 a (e (((c 2) 1 2 e d (a #t)) (#f b -5 5 b -5) ((2 (2 e e 5 () -2) #t) (#t 0 #t #f (-5 0 (-1 c 0 e) () ()) (-5)))) ((((d ((-5 (b (-1 0 (b 0 #t ((-5 #f a ((-1 -1 (#f a (()) d (-1 0 #t b d) a) #t -5) -1 d (c a ((((e 5 2 5)) #f #t c c) c 0 (-1) -1 (-1)) ((((5) #f 2 (1 -5 0)) (0) 1 -5) 5 () ((-2 e 1 #f a 1) ()) #t) -1) ((#t ((#t b -5 b 0 (2 d a)) (1 (d) 1) 0) (() (c) b 0)) () -2 -2)) #t) -1) -1 c) a)) -2 a (b 0 -2 1 0)) d #t) c 0)) (#t b (0 #t)) -1) () (a (((0) e e e 1 a) d -2 -2 (-2 () e) ()) (d)) (5) b d))) 2 (b d) 1) 2 ((((-5) #f 2 -1) c))) 2 (0 -2)) (b () (b -1 -5 -1 (1 a #t)) 5 #t c) #f)) ((-2 2 1) b 5 a))))) 1 a -2 e d) 1) b c -5 -5) 0 -2) -2) 1 c -5) c ()) d 1) ((0 e 1 (0 d (1 0 -2 (a (b 5))) ((1 #f #f) #f () #t -5 -5) (-5 c c #f b)) c) b d #t) ((#t 5 (d -2 2 5)) (a e (((5)) -2 e 5)) a) e 1) -5 (d) a 1 b)) 37)

;; test-Ac-mirror.scm
(check-expect (mirror '()) '())
(check-expect (mirror '(())) '(()))
(check-expect (mirror '(() () (() ()))) '((() ()) () ()))
(check-expect (mirror '(1 2 3 4 5)) '(5 4 3 2 1))
(check-expect (mirror '((a (b 5)) (c d) e)) '(e (d c) ((5 b) a)))
(check-expect (mirror '(0 (-1) -1 (-1) ((((5) #f 2 (1 -5 0)) (0) 1 -5) 5 () ((-2 e 1 #f a 1) ()) #t) -1 ((#t ((#t b -5 b 0 (2 d a)) (1 (d) 1) 0) (() (c) b 0)) () -2 -2) #t)) '(#t (-2 -2 () ((0 b (c) ()) (0 (1 (d) 1) ((a d 2) 0 b -5 b #t)) #t)) -1 (#t (() (1 a #f 1 e -2)) () 5 (-5 1 (0) ((0 -5 1) 2 #f (5)))) (-1) -1 (-1) 0))
(check-expect (mirror '(-1 c a -2 a (b 0 -2 1 0) d #t)) '(#t d (0 1 -2 0 b) a -2 a c -1))
(check-expect (mirror '(0 (#t b (0 #t)) -1 () (a (((0) e e e 1 a) d -2 -2 (-2 () e) ()) (d)))) '(((d) (() (e () -2) -2 -2 d (a 1 e e e (0))) a) () -1 ((#t 0) b #t) 0))
(check-expect (mirror '(-1 5 b d 2 (b d) 1 2 ((((-5) #f 2 -1) c)))) '(((c (-1 2 #f (-5)))) 2 1 (d b) 2 d b 5 -1))
(check-expect (mirror '((0 -2) (b () (b -1 -5 -1 (1 a #t)) 5 #t c) #f ((-2 2 1) b 5 a) 1 a -2 e d 1 b)) '(b 1 d e -2 a 1 (a 5 b (1 2 -2)) #f (c #t 5 ((#t a 1) -1 -5 -1 b) () b) (-2 0)))
(check-expect (mirror '(-5 -5 0 -2 -2 1 c -5 c () d)) '(d () c -5 c 1 -2 -2 0 -5 -5))
(check-expect (mirror '(((0 e 1 (0 d (1 0 -2 (a (b 5))) ((1 #f #f) #f () #t -5 -5) (-5 c c #f b)) c) b d #t) ((#t 5 (d -2 2 5)) (a e (((5)) -2 e 5)) a) e 1 -5 (d))) '((d) -5 1 e (a ((5 e -2 ((5))) e a) ((5 2 -2 d) 5 #t)) (#t d b (c ((b #f c c -5) (-5 -5 #t () #f (#f #f 1)) (((5 b) a) -2 0 1) d 0) 1 e 0))))
(check-expect (mirror '(1 b 0)) '(0 b 1))
(check-expect (mirror '(() -2 a -2 (0 ()) e)) '(e (() 0) -2 a -2 ()))
(check-expect (mirror '((a (5 2 d ((-5 #f) -2) 2) d e () 1) -5 (e (() -2 2 (() 1 #f 2 () ((2 1 -5 b c c) a e d (b (2 -1 -1) -1 (0 ()) ())))) (e -1 d e) d) #t 0 ((0 (5 #t -5 5) ((2 e) (() -2 (#f (#f 2) (-2 #t c 2 -1 ((-5 c) -5 (1 (#f -2) a (a (5))) #t (((-5) 5 #t #f) (2 (5 #f ((-5 5) a (1 2 -1 ((0 (5)) 2 (e 1 c) #f #t ())) d) a (-2 -2 -2 (1 (b c) (#f -2 #t #f #t 0) 1) a (0 1 (() ((a e 5 #f b -1) (-5 b) ((-1 5 (-5) 0) e 5 -2 () (((#f 2 d 2 -1 -5) c (c (() d 2)) (a () (-1 (5 () ((b () ((2 5 -2 ((1 #f (5) a)) #t #f) 2) e -1 0)) ()) #t c a) (-5 -5 b 5 2) (d e (-1) -5) -5)) -1 0 1)) (() 1) 2 ((((c)) #f) (d) -2 a e (a (#f -2 (-1 (#f ((a (#f (-1))) 5 #t 5 ())) e d) 2 e) (b (5 b -1 c (b (e (c) c))) ((d) (((5) (b d e (-1 ((-5 -1) 5 #f) -2 1) a) 1 0) 1) c) b ())))) ((e (2 (() (1 2 (c c)) 2) 5) #t -1) d 2) (a d e) 5 (#t -5 c)) #f a)))) #t c))) (-1 -5 (-2 (5 b ((b ((-2 () ((#t 5 2 () d ()) (-2 e (d (#f #f (e (#f (b (#f a d ((#t #f b)) 5) -2 a (e (((c 2) 1 2 e d (a #t)) (#f b -5 5 b -5) ((2 (2 e e 5 () -2) #t) (#t 0 #t #f (-5 0 (-1 c 0 e) () ()) (-5)))) ((((d ((-5 (b (-1 0 (b 0 #t ((-5 #f a ((-1 -1 (#f a (()) d (-1 0 #t b d) a) #t -5) -1 d (c a ((((e 5 2 5)) #f #t c c) c 0 (-1) -1 (-1)) ((((5) #f 2 (1 -5 0)) (0) 1 -5) 5 () ((-2 e 1 #f a 1) ()) #t) -1) ((#t ((#t b -5 b 0 (2 d a)) (1 (d) 1) 0) (() (c) b 0)) () -2 -2)) #t) -1) -1 c) a)) -2 a (b 0 -2 1 0)) d #t) c 0)) (#t b (0 #t)) -1) () (a (((0) e e e 1 a) d -2 -2 (-2 () e) ()) (d)) (5) b d))) 2 (b d) 1) 2 ((((-5) #f 2 -1) c))) 2 (0 -2)) (b () (b -1 -5 -1 (1 a #t)) 5 #t c) #f)) ((-2 2 1) b 5 a))))) 1 a -2 e d) 1) b c -5 -5) 0 -2) -2) 1 c -5) c ()) d 1) ((0 e 1 (0 d (1 0 -2 (a (b 5))) ((1 #f #f) #f () #t -5 -5) (-5 c c #f b)) c) b d #t) ((#t 5 (d -2 2 5)) (a e (((5)) -2 e 5)) a) e 1) -5 (d) a 1 b)) '(b 1 a (d) -5 (1 e (a ((5 e -2 ((5))) e a) ((5 2 -2 d) 5 #t)) (#t d b (c ((b #f c c -5) (-5 -5 #t () #f (#f #f 1)) (((5 b) a) -2 0 1) d 0) 1 e 0)) (1 d (() c (-5 c 1 (-2 (-2 0 (-5 -5 c b (1 (d e -2 a 1 (((((a 5 b (1 2 -2)) ((#f (c #t 5 ((#t a 1) -1 -5 -1 b) () b) ((-2 0) 2 (((c (-1 2 #f (-5)))) 2 (1 (d b) 2 (((d b (5) ((d) (() (e () -2) -2 -2 d (a 1 e e e (0))) a) () (-1 ((#t 0) b #t) ((0 c (#t d ((0 1 -2 0 b) a -2 ((a (c -1 (-1 (#t ((-2 -2 () ((0 b (c) ()) (0 (1 (d) 1) ((a d 2) 0 b -5 b #t)) #t)) (-1 (#t (() (1 a #f 1 e -2)) () 5 (-5 1 (0) ((0 -5 1) 2 #f (5)))) ((-1) -1 (-1) 0 c (c c #t #f ((5 2 5 e)))) a c) d -1 (-5 #t (a (d b #t 0 -1) d (()) a #f) -1 -1)) a #f -5)) #t 0 b) 0 -1) b) -5)) d)))) ((((-5) (() () (e 0 c -1) 0 -5) #f #t 0 #t) (#t (-2 () 5 e e 2) 2)) (-5 b 5 -5 b #f) ((#t a) d e 2 1 (2 c))) e) a -2 (5 ((b #f #t)) d a #f) b) #f) e) #f #f) d) e -2) (() d () 2 5 #t)) () -2)) b)) b 5) -2) -5 -1) (((c #t ((((a #f ((c -5 #t) 5 (e d a) (2 d (-1 #t (5 (2 ((c c) 2 1) ()) 2) e)) ((((() b (c (1 (0 1 (a (1 -2 (#f 5 (-1 -5)) -1) e d b) (5))) (d)) (((c (c) e) b) c -1 b 5) b) (e 2 (d e ((() 5 #t 5 (((-1) #f) a)) #f) -1) -2 #f) a) e a -2 (d) (#f ((c)))) 2 (1 ()) ((1 0 -1 ((-5 (-5 (-1) e d) (2 5 b -5 -5) (a c #t (() ((0 -1 e (2 (#f #t ((a (5) #f 1)) -2 5 2)) () b)) () 5) -1) () a) ((2 d ()) c) c (-5 -1 2 d 2 #f))) () -2 5 e (0 (-5) 5 -1)) (b -5) (-1 b #f 5 e a)) ()) 1 0) a (1 (0 #t #f #t -2 #f) (c b) 1) -2 -2 -2) a (d ((() #t #f (c 1 e) 2 ((5) 0)) -1 2 1) a (5 -5)) #f 5) 2) (#f #t 5 (-5))) #t (((5) a) a (-2 #f) 1) -5 (c -5)) -1 2 c #t -2) (2 #f) #f) -2 ()) (e 2)) (5 -5 #t 5) 0)) 0 #t (d (e d -1 e) ((((() (() 0) -1 (-1 -1 2) b) d e a (c c b -5 1 2)) () 2 #f 1 ()) 2 -2 ()) e) -5 (1 () e d (2 (-2 (#f -5)) d 2 5) a)))
(check-expect (mirror '(d () -2 a)) '(a -2 () d))
(check-expect (mirror '((0 ()) e -1 (a (5 2 d ((-5 #f) -2) 2) d e () 1) -5 (e (() -2 2 (() 1 #f 2 () ((2 1 -5 b c c) a e d (b (2 -1 -1) -1 (0 ()) ())))) (e -1 d e) d) #t 0 ((0 (5 #t -5 5) ((2 e) (() -2 (#f (#f 2) (-2 #t c 2 -1 ((-5 c) -5 (1 (#f -2) a (a (5))) #t (((-5) 5 #t #f) (2 (5 #f ((-5 5) a (1 2 -1 ((0 (5)) 2 (e 1 c) #f #t ())) d) a (-2 -2 -2 (1 (b c) (#f -2 #t #f #t 0) 1) a (0 1 (() ((a e 5 #f b -1) (-5 b) ((-1 5 (-5) 0) e 5 -2 () (((#f 2 d 2 -1 -5) c (c (() d 2)) (a () (-1 (5 () ((b () ((2 5 -2 ((1 #f (5) a)) #t #f) 2) e -1 0)) ()) #t c a) (-5 -5 b 5 2) (d e (-1) -5) -5)) -1 0 1)) (() 1) 2 ((((c)) #f) (d) -2 a e (a (#f -2 (-1 (#f ((a (#f (-1))) 5 #t 5 ())) e d) 2 e) (b (5 b -1 c (b (e (c) c))) ((d) (((5) (b d e (-1 ((-5 -1) 5 #f) -2 1) a) 1 0) 1) c) b ())))) ((e (2 (() (1 2 (c c)) 2) 5) #t -1) d 2) (a d e) 5 (#t -5 c)) #f a)))) #t c))) (-1 -5 (-2 (5 b ((b ((-2 () ((#t 5 2 () d ()) (-2 e (d (#f #f (e (#f (b (#f a d ((#t #f b)) 5) -2 a (e (((c 2) 1 2 e d (a #t)) (#f b -5 5 b -5) ((2 (2 e e 5 () -2) #t) (#t 0 #t #f (-5 0 (-1 c 0 e) () ()) (-5)))) ((((d ((-5 (b (-1 0 (b 0 #t ((-5 #f a ((-1 -1 (#f a (()) d (-1 0 #t b d) a) #t -5) -1 d (c a ((((e 5 2 5)) #f #t c c) c 0 (-1) -1 (-1)) ((((5) #f 2 (1 -5 0)) (0) 1 -5) 5 () ((-2 e 1 #f a 1) ()) #t) -1) ((#t ((#t b -5 b 0 (2 d a)) (1 (d) 1) 0) (() (c) b 0)) () -2 -2)) #t) -1) -1 c) a)) -2 a (b 0 -2 1 0)) d #t) c 0)) (#t b (0 #t)) -1) () (a (((0) e e e 1 a) d -2 -2 (-2 () e) ()) (d)) (5) b d))) 2 (b d) 1) 2 ((((-5) #f 2 -1) c))) 2 (0 -2)) (b () (b -1 -5 -1 (1 a #t)) 5 #t c) #f)) ((-2 2 1) b 5 a))))) 1 a -2 e d) 1) b c -5 -5) 0 -2) -2) 1 c -5) c ()) d 1) ((0 e 1 (0 d (1 0 -2 (a (b 5))) ((1 #f #f) #f () #t -5 -5) (-5 c c #f b)) c) b d #t) ((#t 5 (d -2 2 5)) (a e (((5)) -2 e 5)) a) e 1) -5)) '(-5 (1 e (a ((5 e -2 ((5))) e a) ((5 2 -2 d) 5 #t)) (#t d b (c ((b #f c c -5) (-5 -5 #t () #f (#f #f 1)) (((5 b) a) -2 0 1) d 0) 1 e 0)) (1 d (() c (-5 c 1 (-2 (-2 0 (-5 -5 c b (1 (d e -2 a 1 (((((a 5 b (1 2 -2)) ((#f (c #t 5 ((#t a 1) -1 -5 -1 b) () b) ((-2 0) 2 (((c (-1 2 #f (-5)))) 2 (1 (d b) 2 (((d b (5) ((d) (() (e () -2) -2 -2 d (a 1 e e e (0))) a) () (-1 ((#t 0) b #t) ((0 c (#t d ((0 1 -2 0 b) a -2 ((a (c -1 (-1 (#t ((-2 -2 () ((0 b (c) ()) (0 (1 (d) 1) ((a d 2) 0 b -5 b #t)) #t)) (-1 (#t (() (1 a #f 1 e -2)) () 5 (-5 1 (0) ((0 -5 1) 2 #f (5)))) ((-1) -1 (-1) 0 c (c c #t #f ((5 2 5 e)))) a c) d -1 (-5 #t (a (d b #t 0 -1) d (()) a #f) -1 -1)) a #f -5)) #t 0 b) 0 -1) b) -5)) d)))) ((((-5) (() () (e 0 c -1) 0 -5) #f #t 0 #t) (#t (-2 () 5 e e 2) 2)) (-5 b 5 -5 b #f) ((#t a) d e 2 1 (2 c))) e) a -2 (5 ((b #f #t)) d a #f) b) #f) e) #f #f) d) e -2) (() d () 2 5 #t)) () -2)) b)) b 5) -2) -5 -1) (((c #t ((((a #f ((c -5 #t) 5 (e d a) (2 d (-1 #t (5 (2 ((c c) 2 1) ()) 2) e)) ((((() b (c (1 (0 1 (a (1 -2 (#f 5 (-1 -5)) -1) e d b) (5))) (d)) (((c (c) e) b) c -1 b 5) b) (e 2 (d e ((() 5 #t 5 (((-1) #f) a)) #f) -1) -2 #f) a) e a -2 (d) (#f ((c)))) 2 (1 ()) ((1 0 -1 ((-5 (-5 (-1) e d) (2 5 b -5 -5) (a c #t (() ((0 -1 e (2 (#f #t ((a (5) #f 1)) -2 5 2)) () b)) () 5) -1) () a) ((2 d ()) c) c (-5 -1 2 d 2 #f))) () -2 5 e (0 (-5) 5 -1)) (b -5) (-1 b #f 5 e a)) ()) 1 0) a (1 (0 #t #f #t -2 #f) (c b) 1) -2 -2 -2) a (d ((() #t #f (c 1 e) 2 ((5) 0)) -1 2 1) a (5 -5)) #f 5) 2) (#f #t 5 (-5))) #t (((5) a) a (-2 #f) 1) -5 (c -5)) -1 2 c #t -2) (2 #f) #f) -2 ()) (e 2)) (5 -5 #t 5) 0)) 0 #t (d (e d -1 e) ((((() (() 0) -1 (-1 -1 2) b) d e a (c c b -5 1 2)) () 2 #f 1 ()) 2 -2 ()) e) -5 (1 () e d (2 (-2 (#f -5)) d 2 5) a) -1 e (() 0)))
(check-expect (mirror '(-1 d a)) '(a d -1))
(check-expect (mirror '(b 0 d () -2 a -2 (0 ()) e)) '(e (() 0) -2 a -2 () d 0 b))
(check-expect (mirror '((a (5 2 d ((-5 #f) -2) 2) d e () 1) -5 (e (() -2 2 (() 1 #f 2 () ((2 1 -5 b c c) a e d (b (2 -1 -1) -1 (0 ()) ())))) (e -1 d e) d) #t 0 ((0 (5 #t -5 5) ((2 e) (() -2 (#f (#f 2) (-2 #t c 2 -1 ((-5 c) -5 (1 (#f -2) a (a (5))) #t (((-5) 5 #t #f) (2 (5 #f ((-5 5) a (1 2 -1 ((0 (5)) 2 (e 1 c) #f #t ())) d) a (-2 -2 -2 (1 (b c) (#f -2 #t #f #t 0) 1) a (0 1 (() ((a e 5 #f b -1) (-5 b) ((-1 5 (-5) 0) e 5 -2 () (((#f 2 d 2 -1 -5) c (c (() d 2)) (a () (-1 (5 () ((b () ((2 5 -2 ((1 #f (5) a)) #t #f) 2) e -1 0)) ()) #t c a) (-5 -5 b 5 2) (d e (-1) -5) -5)) -1 0 1)) (() 1) 2 ((((c)) #f) (d) -2 a e (a (#f -2 (-1 (#f ((a (#f (-1))) 5 #t 5 ())) e d) 2 e) (b (5 b -1 c (b (e (c) c))) ((d) (((5) (b d e (-1 ((-5 -1) 5 #f) -2 1) a) 1 0) 1) c) b ())))) ((e (2 (() (1 2 (c c)) 2) 5) #t -1) d 2) (a d e) 5 (#t -5 c)) #f a)))) #t c))) (-1 -5 (-2 (5 b ((b ((-2 () ((#t 5 2 () d ()) (-2 e (d (#f #f (e (#f (b (#f a d ((#t #f b)) 5) -2 a (e (((c 2) 1 2 e d (a #t)) (#f b -5 5 b -5) ((2 (2 e e 5 () -2) #t) (#t 0 #t #f (-5 0 (-1 c 0 e) () ()) (-5)))) ((((d ((-5 (b (-1 0 (b 0 #t ((-5 #f a ((-1 -1 (#f a (()) d (-1 0 #t b d) a) #t -5) -1 d (c a ((((e 5 2 5)) #f #t c c) c 0 (-1) -1 (-1)) ((((5) #f 2 (1 -5 0)) (0) 1 -5) 5 () ((-2 e 1 #f a 1) ()) #t) -1) ((#t ((#t b -5 b 0 (2 d a)) (1 (d) 1) 0) (() (c) b 0)) () -2 -2)) #t) -1) -1 c) a)) -2 a (b 0 -2 1 0)) d #t) c 0)) (#t b (0 #t)) -1) () (a (((0) e e e 1 a) d -2 -2 (-2 () e) ()) (d)) (5) b d))) 2 (b d) 1) 2 ((((-5) #f 2 -1) c))) 2 (0 -2)) (b () (b -1 -5 -1 (1 a #t)) 5 #t c) #f)) ((-2 2 1) b 5 a))))) 1 a -2 e d) 1) b c -5 -5) 0 -2) -2) 1 c -5) c ()) d 1) ((0 e 1 (0 d (1 0 -2 (a (b 5))) ((1 #f #f) #f () #t -5 -5) (-5 c c #f b)) c) b d #t) ((#t 5 (d -2 2 5)) (a e (((5)) -2 e 5)) a) e 1) -5 (d) a 1 b)) '(b 1 a (d) -5 (1 e (a ((5 e -2 ((5))) e a) ((5 2 -2 d) 5 #t)) (#t d b (c ((b #f c c -5) (-5 -5 #t () #f (#f #f 1)) (((5 b) a) -2 0 1) d 0) 1 e 0)) (1 d (() c (-5 c 1 (-2 (-2 0 (-5 -5 c b (1 (d e -2 a 1 (((((a 5 b (1 2 -2)) ((#f (c #t 5 ((#t a 1) -1 -5 -1 b) () b) ((-2 0) 2 (((c (-1 2 #f (-5)))) 2 (1 (d b) 2 (((d b (5) ((d) (() (e () -2) -2 -2 d (a 1 e e e (0))) a) () (-1 ((#t 0) b #t) ((0 c (#t d ((0 1 -2 0 b) a -2 ((a (c -1 (-1 (#t ((-2 -2 () ((0 b (c) ()) (0 (1 (d) 1) ((a d 2) 0 b -5 b #t)) #t)) (-1 (#t (() (1 a #f 1 e -2)) () 5 (-5 1 (0) ((0 -5 1) 2 #f (5)))) ((-1) -1 (-1) 0 c (c c #t #f ((5 2 5 e)))) a c) d -1 (-5 #t (a (d b #t 0 -1) d (()) a #f) -1 -1)) a #f -5)) #t 0 b) 0 -1) b) -5)) d)))) ((((-5) (() () (e 0 c -1) 0 -5) #f #t 0 #t) (#t (-2 () 5 e e 2) 2)) (-5 b 5 -5 b #f) ((#t a) d e 2 1 (2 c))) e) a -2 (5 ((b #f #t)) d a #f) b) #f) e) #f #f) d) e -2) (() d () 2 5 #t)) () -2)) b)) b 5) -2) -5 -1) (((c #t ((((a #f ((c -5 #t) 5 (e d a) (2 d (-1 #t (5 (2 ((c c) 2 1) ()) 2) e)) ((((() b (c (1 (0 1 (a (1 -2 (#f 5 (-1 -5)) -1) e d b) (5))) (d)) (((c (c) e) b) c -1 b 5) b) (e 2 (d e ((() 5 #t 5 (((-1) #f) a)) #f) -1) -2 #f) a) e a -2 (d) (#f ((c)))) 2 (1 ()) ((1 0 -1 ((-5 (-5 (-1) e d) (2 5 b -5 -5) (a c #t (() ((0 -1 e (2 (#f #t ((a (5) #f 1)) -2 5 2)) () b)) () 5) -1) () a) ((2 d ()) c) c (-5 -1 2 d 2 #f))) () -2 5 e (0 (-5) 5 -1)) (b -5) (-1 b #f 5 e a)) ()) 1 0) a (1 (0 #t #f #t -2 #f) (c b) 1) -2 -2 -2) a (d ((() #t #f (c 1 e) 2 ((5) 0)) -1 2 1) a (5 -5)) #f 5) 2) (#f #t 5 (-5))) #t (((5) a) a (-2 #f) 1) -5 (c -5)) -1 2 c #t -2) (2 #f) #f) -2 ()) (e 2)) (5 -5 #t 5) 0)) 0 #t (d (e d -1 e) ((((() (() 0) -1 (-1 -1 2) b) d e a (c c b -5 1 2)) () 2 #f 1 ()) 2 -2 ()) e) -5 (1 () e d (2 (-2 (#f -5)) d 2 5) a)))

;; test-Ad-flatten.scm
(check-expect (flatten '()) '())
(check-expect (flatten '(())) '())
(check-expect (flatten '(() () (() ()))) '())
(check-expect (flatten '((I Ching) (U Thant) (E Coli))) '(I Ching U Thant E Coli))
(check-expect (flatten '((a b) ((c d) e))) '(a b c d e))
(check-expect (flatten '(0 (-1) -1 (-1) ((((5) #f 2 (1 -5 0)) (0) 1 -5) 5 () ((-2 e 1 #f a 1) ()) #t) -1 ((#t ((#t b -5 b 0 (2 d a)) (1 (d) 1) 0) (() (c) b 0)) () -2 -2) #t)) '(0 -1 -1 -1 5 #f 2 1 -5 0 0 1 -5 5 -2 e 1 #f a 1 #t -1 #t #t b -5 b 0 2 d a 1 d 1 0 c b 0 -2 -2 #t))
(check-expect (flatten '(-1 c a -2 a (b 0 -2 1 0) d #t)) '(-1 c a -2 a b 0 -2 1 0 d #t))
(check-expect (flatten '(0 (#t b (0 #t)) -1 () (a (((0) e e e 1 a) d -2 -2 (-2 () e) ()) (d)))) '(0 #t b 0 #t -1 a 0 e e e 1 a d -2 -2 -2 e d))
(check-expect (flatten '(-1 5 b d 2 (b d) 1 2 ((((-5) #f 2 -1) c)))) '(-1 5 b d 2 b d 1 2 -5 #f 2 -1 c))
(check-expect (flatten '((0 -2) (b () (b -1 -5 -1 (1 a #t)) 5 #t c) #f ((-2 2 1) b 5 a) 1 a -2 e d 1 b)) '(0 -2 b b -1 -5 -1 1 a #t 5 #t c #f -2 2 1 b 5 a 1 a -2 e d 1 b))
(check-expect (flatten '(-5 -5 0 -2 -2 1 c -5 c () d)) '(-5 -5 0 -2 -2 1 c -5 c d))
(check-expect (flatten '(((0 e 1 (0 d (1 0 -2 (a (b 5))) ((1 #f #f) #f () #t -5 -5) (-5 c c #f b)) c) b d #t) ((#t 5 (d -2 2 5)) (a e (((5)) -2 e 5)) a) e 1 -5 (d))) '(0 e 1 0 d 1 0 -2 a b 5 1 #f #f #f #t -5 -5 -5 c c #f b c b d #t #t 5 d -2 2 5 a e 5 -2 e 5 a e 1 -5 d))
(check-expect (flatten '(1 b 0)) '(1 b 0))
(check-expect (flatten '(() -2 a -2 (0 ()) e)) '(-2 a -2 0 e))
(check-expect (flatten '((a (5 2 d ((-5 #f) -2) 2) d e () 1) -5 (e (() -2 2 (() 1 #f 2 () ((2 1 -5 b c c) a e d (b (2 -1 -1) -1 (0 ()) ())))) (e -1 d e) d) #t 0 ((0 (5 #t -5 5) ((2 e) (() -2 (#f (#f 2) (-2 #t c 2 -1 ((-5 c) -5 (1 (#f -2) a (a (5))) #t (((-5) 5 #t #f) (2 (5 #f ((-5 5) a (1 2 -1 ((0 (5)) 2 (e 1 c) #f #t ())) d) a (-2 -2 -2 (1 (b c) (#f -2 #t #f #t 0) 1) a (0 1 (() ((a e 5 #f b -1) (-5 b) ((-1 5 (-5) 0) e 5 -2 () (((#f 2 d 2 -1 -5) c (c (() d 2)) (a () (-1 (5 () ((b () ((2 5 -2 ((1 #f (5) a)) #t #f) 2) e -1 0)) ()) #t c a) (-5 -5 b 5 2) (d e (-1) -5) -5)) -1 0 1)) (() 1) 2 ((((c)) #f) (d) -2 a e (a (#f -2 (-1 (#f ((a (#f (-1))) 5 #t 5 ())) e d) 2 e) (b (5 b -1 c (b (e (c) c))) ((d) (((5) (b d e (-1 ((-5 -1) 5 #f) -2 1) a) 1 0) 1) c) b ())))) ((e (2 (() (1 2 (c c)) 2) 5) #t -1) d 2) (a d e) 5 (#t -5 c)) #f a)))) #t c))) (-1 -5 (-2 (5 b ((b ((-2 () ((#t 5 2 () d ()) (-2 e (d (#f #f (e (#f (b (#f a d ((#t #f b)) 5) -2 a (e (((c 2) 1 2 e d (a #t)) (#f b -5 5 b -5) ((2 (2 e e 5 () -2) #t) (#t 0 #t #f (-5 0 (-1 c 0 e) () ()) (-5)))) ((((d ((-5 (b (-1 0 (b 0 #t ((-5 #f a ((-1 -1 (#f a (()) d (-1 0 #t b d) a) #t -5) -1 d (c a ((((e 5 2 5)) #f #t c c) c 0 (-1) -1 (-1)) ((((5) #f 2 (1 -5 0)) (0) 1 -5) 5 () ((-2 e 1 #f a 1) ()) #t) -1) ((#t ((#t b -5 b 0 (2 d a)) (1 (d) 1) 0) (() (c) b 0)) () -2 -2)) #t) -1) -1 c) a)) -2 a (b 0 -2 1 0)) d #t) c 0)) (#t b (0 #t)) -1) () (a (((0) e e e 1 a) d -2 -2 (-2 () e) ()) (d)) (5) b d))) 2 (b d) 1) 2 ((((-5) #f 2 -1) c))) 2 (0 -2)) (b () (b -1 -5 -1 (1 a #t)) 5 #t c) #f)) ((-2 2 1) b 5 a))))) 1 a -2 e d) 1) b c -5 -5) 0 -2) -2) 1 c -5) c ()) d 1) ((0 e 1 (0 d (1 0 -2 (a (b 5))) ((1 #f #f) #f () #t -5 -5) (-5 c c #f b)) c) b d #t) ((#t 5 (d -2 2 5)) (a e (((5)) -2 e 5)) a) e 1) -5 (d) a 1 b)) '(a 5 2 d -5 #f -2 2 d e 1 -5 e -2 2 1 #f 2 2 1 -5 b c c a e d b 2 -1 -1 -1 0 e -1 d e d #t 0 0 5 #t -5 5 2 e -2 #f #f 2 -2 #t c 2 -1 -5 c -5 1 #f -2 a a 5 #t -5 5 #t #f 2 5 #f -5 5 a 1 2 -1 0 5 2 e 1 c #f #t d a -2 -2 -2 1 b c #f -2 #t #f #t 0 1 a 0 1 a e 5 #f b -1 -5 b -1 5 -5 0 e 5 -2 #f 2 d 2 -1 -5 c c d 2 a -1 5 b 2 5 -2 1 #f 5 a #t #f 2 e -1 0 #t c a -5 -5 b 5 2 d e -1 -5 -5 -1 0 1 1 2 c #f d -2 a e a #f -2 -1 #f a #f -1 5 #t 5 e d 2 e b 5 b -1 c b e c c d 5 b d e -1 -5 -1 5 #f -2 1 a 1 0 1 c b e 2 1 2 c c 2 5 #t -1 d 2 a d e 5 #t -5 c #f a #t c -1 -5 -2 5 b b -2 #t 5 2 d -2 e d #f #f e #f b #f a d #t #f b 5 -2 a e c 2 1 2 e d a #t #f b -5 5 b -5 2 2 e e 5 -2 #t #t 0 #t #f -5 0 -1 c 0 e -5 d -5 b -1 0 b 0 #t -5 #f a -1 -1 #f a d -1 0 #t b d a #t -5 -1 d c a e 5 2 5 #f #t c c c 0 -1 -1 -1 5 #f 2 1 -5 0 0 1 -5 5 -2 e 1 #f a 1 #t -1 #t #t b -5 b 0 2 d a 1 d 1 0 c b 0 -2 -2 #t -1 -1 c a -2 a b 0 -2 1 0 d #t c 0 #t b 0 #t -1 a 0 e e e 1 a d -2 -2 -2 e d 5 b d 2 b d 1 2 -5 #f 2 -1 c 2 0 -2 b b -1 -5 -1 1 a #t 5 #t c #f -2 2 1 b 5 a 1 a -2 e d 1 b c -5 -5 0 -2 -2 1 c -5 c d 1 0 e 1 0 d 1 0 -2 a b 5 1 #f #f #f #t -5 -5 -5 c c #f b c b d #t #t 5 d -2 2 5 a e 5 -2 e 5 a e 1 -5 d a 1 b))
(check-expect (flatten '(d () -2 a)) '(d -2 a))
(check-expect (flatten '((0 ()) e -1 (a (5 2 d ((-5 #f) -2) 2) d e () 1) -5 (e (() -2 2 (() 1 #f 2 () ((2 1 -5 b c c) a e d (b (2 -1 -1) -1 (0 ()) ())))) (e -1 d e) d) #t 0 ((0 (5 #t -5 5) ((2 e) (() -2 (#f (#f 2) (-2 #t c 2 -1 ((-5 c) -5 (1 (#f -2) a (a (5))) #t (((-5) 5 #t #f) (2 (5 #f ((-5 5) a (1 2 -1 ((0 (5)) 2 (e 1 c) #f #t ())) d) a (-2 -2 -2 (1 (b c) (#f -2 #t #f #t 0) 1) a (0 1 (() ((a e 5 #f b -1) (-5 b) ((-1 5 (-5) 0) e 5 -2 () (((#f 2 d 2 -1 -5) c (c (() d 2)) (a () (-1 (5 () ((b () ((2 5 -2 ((1 #f (5) a)) #t #f) 2) e -1 0)) ()) #t c a) (-5 -5 b 5 2) (d e (-1) -5) -5)) -1 0 1)) (() 1) 2 ((((c)) #f) (d) -2 a e (a (#f -2 (-1 (#f ((a (#f (-1))) 5 #t 5 ())) e d) 2 e) (b (5 b -1 c (b (e (c) c))) ((d) (((5) (b d e (-1 ((-5 -1) 5 #f) -2 1) a) 1 0) 1) c) b ())))) ((e (2 (() (1 2 (c c)) 2) 5) #t -1) d 2) (a d e) 5 (#t -5 c)) #f a)))) #t c))) (-1 -5 (-2 (5 b ((b ((-2 () ((#t 5 2 () d ()) (-2 e (d (#f #f (e (#f (b (#f a d ((#t #f b)) 5) -2 a (e (((c 2) 1 2 e d (a #t)) (#f b -5 5 b -5) ((2 (2 e e 5 () -2) #t) (#t 0 #t #f (-5 0 (-1 c 0 e) () ()) (-5)))) ((((d ((-5 (b (-1 0 (b 0 #t ((-5 #f a ((-1 -1 (#f a (()) d (-1 0 #t b d) a) #t -5) -1 d (c a ((((e 5 2 5)) #f #t c c) c 0 (-1) -1 (-1)) ((((5) #f 2 (1 -5 0)) (0) 1 -5) 5 () ((-2 e 1 #f a 1) ()) #t) -1) ((#t ((#t b -5 b 0 (2 d a)) (1 (d) 1) 0) (() (c) b 0)) () -2 -2)) #t) -1) -1 c) a)) -2 a (b 0 -2 1 0)) d #t) c 0)) (#t b (0 #t)) -1) () (a (((0) e e e 1 a) d -2 -2 (-2 () e) ()) (d)) (5) b d))) 2 (b d) 1) 2 ((((-5) #f 2 -1) c))) 2 (0 -2)) (b () (b -1 -5 -1 (1 a #t)) 5 #t c) #f)) ((-2 2 1) b 5 a))))) 1 a -2 e d) 1) b c -5 -5) 0 -2) -2) 1 c -5) c ()) d 1) ((0 e 1 (0 d (1 0 -2 (a (b 5))) ((1 #f #f) #f () #t -5 -5) (-5 c c #f b)) c) b d #t) ((#t 5 (d -2 2 5)) (a e (((5)) -2 e 5)) a) e 1) -5)) '(0 e -1 a 5 2 d -5 #f -2 2 d e 1 -5 e -2 2 1 #f 2 2 1 -5 b c c a e d b 2 -1 -1 -1 0 e -1 d e d #t 0 0 5 #t -5 5 2 e -2 #f #f 2 -2 #t c 2 -1 -5 c -5 1 #f -2 a a 5 #t -5 5 #t #f 2 5 #f -5 5 a 1 2 -1 0 5 2 e 1 c #f #t d a -2 -2 -2 1 b c #f -2 #t #f #t 0 1 a 0 1 a e 5 #f b -1 -5 b -1 5 -5 0 e 5 -2 #f 2 d 2 -1 -5 c c d 2 a -1 5 b 2 5 -2 1 #f 5 a #t #f 2 e -1 0 #t c a -5 -5 b 5 2 d e -1 -5 -5 -1 0 1 1 2 c #f d -2 a e a #f -2 -1 #f a #f -1 5 #t 5 e d 2 e b 5 b -1 c b e c c d 5 b d e -1 -5 -1 5 #f -2 1 a 1 0 1 c b e 2 1 2 c c 2 5 #t -1 d 2 a d e 5 #t -5 c #f a #t c -1 -5 -2 5 b b -2 #t 5 2 d -2 e d #f #f e #f b #f a d #t #f b 5 -2 a e c 2 1 2 e d a #t #f b -5 5 b -5 2 2 e e 5 -2 #t #t 0 #t #f -5 0 -1 c 0 e -5 d -5 b -1 0 b 0 #t -5 #f a -1 -1 #f a d -1 0 #t b d a #t -5 -1 d c a e 5 2 5 #f #t c c c 0 -1 -1 -1 5 #f 2 1 -5 0 0 1 -5 5 -2 e 1 #f a 1 #t -1 #t #t b -5 b 0 2 d a 1 d 1 0 c b 0 -2 -2 #t -1 -1 c a -2 a b 0 -2 1 0 d #t c 0 #t b 0 #t -1 a 0 e e e 1 a d -2 -2 -2 e d 5 b d 2 b d 1 2 -5 #f 2 -1 c 2 0 -2 b b -1 -5 -1 1 a #t 5 #t c #f -2 2 1 b 5 a 1 a -2 e d 1 b c -5 -5 0 -2 -2 1 c -5 c d 1 0 e 1 0 d 1 0 -2 a b 5 1 #f #f #f #t -5 -5 -5 c c #f b c b d #t #t 5 d -2 2 5 a e 5 -2 e 5 a e 1 -5))
(check-expect (flatten '(-1 d a)) '(-1 d a))
(check-expect (flatten '(b 0 d () -2 a -2 (0 ()) e)) '(b 0 d -2 a -2 0 e))
(check-expect (flatten '((a (5 2 d ((-5 #f) -2) 2) d e () 1) -5 (e (() -2 2 (() 1 #f 2 () ((2 1 -5 b c c) a e d (b (2 -1 -1) -1 (0 ()) ())))) (e -1 d e) d) #t 0 ((0 (5 #t -5 5) ((2 e) (() -2 (#f (#f 2) (-2 #t c 2 -1 ((-5 c) -5 (1 (#f -2) a (a (5))) #t (((-5) 5 #t #f) (2 (5 #f ((-5 5) a (1 2 -1 ((0 (5)) 2 (e 1 c) #f #t ())) d) a (-2 -2 -2 (1 (b c) (#f -2 #t #f #t 0) 1) a (0 1 (() ((a e 5 #f b -1) (-5 b) ((-1 5 (-5) 0) e 5 -2 () (((#f 2 d 2 -1 -5) c (c (() d 2)) (a () (-1 (5 () ((b () ((2 5 -2 ((1 #f (5) a)) #t #f) 2) e -1 0)) ()) #t c a) (-5 -5 b 5 2) (d e (-1) -5) -5)) -1 0 1)) (() 1) 2 ((((c)) #f) (d) -2 a e (a (#f -2 (-1 (#f ((a (#f (-1))) 5 #t 5 ())) e d) 2 e) (b (5 b -1 c (b (e (c) c))) ((d) (((5) (b d e (-1 ((-5 -1) 5 #f) -2 1) a) 1 0) 1) c) b ())))) ((e (2 (() (1 2 (c c)) 2) 5) #t -1) d 2) (a d e) 5 (#t -5 c)) #f a)))) #t c))) (-1 -5 (-2 (5 b ((b ((-2 () ((#t 5 2 () d ()) (-2 e (d (#f #f (e (#f (b (#f a d ((#t #f b)) 5) -2 a (e (((c 2) 1 2 e d (a #t)) (#f b -5 5 b -5) ((2 (2 e e 5 () -2) #t) (#t 0 #t #f (-5 0 (-1 c 0 e) () ()) (-5)))) ((((d ((-5 (b (-1 0 (b 0 #t ((-5 #f a ((-1 -1 (#f a (()) d (-1 0 #t b d) a) #t -5) -1 d (c a ((((e 5 2 5)) #f #t c c) c 0 (-1) -1 (-1)) ((((5) #f 2 (1 -5 0)) (0) 1 -5) 5 () ((-2 e 1 #f a 1) ()) #t) -1) ((#t ((#t b -5 b 0 (2 d a)) (1 (d) 1) 0) (() (c) b 0)) () -2 -2)) #t) -1) -1 c) a)) -2 a (b 0 -2 1 0)) d #t) c 0)) (#t b (0 #t)) -1) () (a (((0) e e e 1 a) d -2 -2 (-2 () e) ()) (d)) (5) b d))) 2 (b d) 1) 2 ((((-5) #f 2 -1) c))) 2 (0 -2)) (b () (b -1 -5 -1 (1 a #t)) 5 #t c) #f)) ((-2 2 1) b 5 a))))) 1 a -2 e d) 1) b c -5 -5) 0 -2) -2) 1 c -5) c ()) d 1) ((0 e 1 (0 d (1 0 -2 (a (b 5))) ((1 #f #f) #f () #t -5 -5) (-5 c c #f b)) c) b d #t) ((#t 5 (d -2 2 5)) (a e (((5)) -2 e 5)) a) e 1) -5 (d) a 1 b)) '(a 5 2 d -5 #f -2 2 d e 1 -5 e -2 2 1 #f 2 2 1 -5 b c c a e d b 2 -1 -1 -1 0 e -1 d e d #t 0 0 5 #t -5 5 2 e -2 #f #f 2 -2 #t c 2 -1 -5 c -5 1 #f -2 a a 5 #t -5 5 #t #f 2 5 #f -5 5 a 1 2 -1 0 5 2 e 1 c #f #t d a -2 -2 -2 1 b c #f -2 #t #f #t 0 1 a 0 1 a e 5 #f b -1 -5 b -1 5 -5 0 e 5 -2 #f 2 d 2 -1 -5 c c d 2 a -1 5 b 2 5 -2 1 #f 5 a #t #f 2 e -1 0 #t c a -5 -5 b 5 2 d e -1 -5 -5 -1 0 1 1 2 c #f d -2 a e a #f -2 -1 #f a #f -1 5 #t 5 e d 2 e b 5 b -1 c b e c c d 5 b d e -1 -5 -1 5 #f -2 1 a 1 0 1 c b e 2 1 2 c c 2 5 #t -1 d 2 a d e 5 #t -5 c #f a #t c -1 -5 -2 5 b b -2 #t 5 2 d -2 e d #f #f e #f b #f a d #t #f b 5 -2 a e c 2 1 2 e d a #t #f b -5 5 b -5 2 2 e e 5 -2 #t #t 0 #t #f -5 0 -1 c 0 e -5 d -5 b -1 0 b 0 #t -5 #f a -1 -1 #f a d -1 0 #t b d a #t -5 -1 d c a e 5 2 5 #f #t c c c 0 -1 -1 -1 5 #f 2 1 -5 0 0 1 -5 5 -2 e 1 #f a 1 #t -1 #t #t b -5 b 0 2 d a 1 d 1 0 c b 0 -2 -2 #t -1 -1 c a -2 a b 0 -2 1 0 d #t c 0 #t b 0 #t -1 a 0 e e e 1 a d -2 -2 -2 e d 5 b d 2 b d 1 2 -5 #f 2 -1 c 2 0 -2 b b -1 -5 -1 1 a #t 5 #t c #f -2 2 1 b 5 a 1 a -2 e d 1 b c -5 -5 0 -2 -2 1 c -5 c d 1 0 e 1 0 d 1 0 -2 a b 5 1 #f #f #f #t -5 -5 -5 c c #f b c b d #t #t 5 d -2 2 5 a e 5 -2 e 5 a e 1 -5 d a 1 b))

;; test-Ae-sublist?.scm
(check-expect (sublist? '() '()) #t)
(check-expect (sublist? '() '(a b c)) #t)
(check-expect (sublist? '(a) '()) #f)
(check-expect (sublist? '(a) '(a b c)) #t)
(check-expect (sublist? '(a) '(1 2 a b c 5 6)) #t)
(check-expect (sublist? '(a) '(1 2 a 3 b 4 c 5 6)) #t)
(check-expect (sublist? '(a b c) '()) #f)
(check-expect (sublist? '(a b c) '(a b c)) #t)
(check-expect (sublist? '(a b c) '(c b a)) #f)
(check-expect (sublist? '(a b c) '(1 2 a b c 5 6)) #t)
(check-expect (sublist? '(a b c) '(6 5 c b a 2 1)) #f)
(check-expect (sublist? '(a b c) '(1 2 a 3 b 4 c 5 6)) #f)
(check-expect (sublist? '(a b c) '(6 5 c 4 b 3 a 2 1)) #f)
(check-expect (sublist? '(a y b z c) '()) #f)
(check-expect (sublist? '(a y b z c) '(a b c)) #f)
(check-expect (sublist? '(a y b z c) '(c b a)) #f)
(check-expect (sublist? '(a y b z c) '(1 2 a b c 5 6)) #f)
(check-expect (sublist? '(a y b z c) '(6 5 c b a 2 1)) #f)
(check-expect (sublist? '(a y b z c) '(1 2 a 3 b 4 c 5 6)) #f)
(check-expect (sublist? '(a y b z c) '(6 5 c 4 b 3 a 2 1)) #f)
(check-expect (sublist? '(a b c) '(a a b a b c)) #t)
(check-expect (sublist? '(a a a) '(a a b a b c)) #f)
(check-expect (sublist? '(1 2 3) '(a b 1 1 2 3 c d)) #t)
(check-expect (sublist? '(a b c) '(a b x b c)) #f)

;; test-Af-subseq?.scm
(check-expect (subseq? '() '()) #t)
(check-expect (subseq? '() '(a b c)) #t)
(check-expect (subseq? '(a) '()) #f)
(check-expect (subseq? '(a) '(a b c)) #t)
(check-expect (subseq? '(a) '(1 2 a b c 5 6)) #t)
(check-expect (subseq? '(a) '(1 2 a 3 b 4 c 5 6)) #t)
(check-expect (subseq? '(a b c) '()) #f)
(check-expect (subseq? '(a b c) '(a b c)) #t)
(check-expect (subseq? '(a b c) '(c b a)) #f)
(check-expect (subseq? '(a b c) '(1 2 a b c 5 6)) #t)
(check-expect (subseq? '(a b c) '(6 5 c b a 2 1)) #f)
(check-expect (subseq? '(a b c) '(1 2 a 3 b 4 c 5 6)) #t)
(check-expect (subseq? '(a b c) '(6 5 c 4 b 3 a 2 1)) #f)
(check-expect (subseq? '(a y b z c) '()) #f)
(check-expect (subseq? '(a y b z c) '(a b c)) #f)
(check-expect (subseq? '(a y b z c) '(c b a)) #f)
(check-expect (subseq? '(a y b z c) '(1 2 a b c 5 6)) #f)
(check-expect (subseq? '(a y b z c) '(6 5 c b a 2 1)) #f)
(check-expect (subseq? '(a y b z c) '(1 2 a 3 b 4 c 5 6)) #f)
(check-expect (subseq? '(a y b z c) '(6 5 c 4 b 3 a 2 1)) #f)
(check-expect (subseq? '(a b c) '(a a b a b c)) #t)
(check-expect (subseq? '(a a a) '(a a b a b c)) #t)
(check-expect (subseq? '(a b c) '(a b x b c)) #t)

;; test-B1-take.scm
(check-expect (take 0 '()) '())
(check-expect (take 5 '()) '())
(check-expect (take 0 '(a b c d e)) '())
(check-expect (take 1 '(a b c d e)) '(a))
(check-expect (take 2 '(a b c d e)) '(a b))
(check-expect (take 3 '(a b c d e)) '(a b c))
(check-expect (take 4 '(a b c d e)) '(a b c d))
(check-expect (take 5 '(a b c d e)) '(a b c d e))
(check-expect (take 6 '(a b c d e)) '(a b c d e))
(check-expect (take 7 '(a b c d e)) '(a b c d e))

;; test-B2-drop.scm
(check-expect (drop 0 '()) '())
(check-expect (drop 5 '()) '())
(check-expect (drop 0 '(a b c d e)) '(a b c d e))
(check-expect (drop 1 '(a b c d e)) '(b c d e))
(check-expect (drop 2 '(a b c d e)) '(c d e))
(check-expect (drop 3 '(a b c d e)) '(d e))
(check-expect (drop 4 '(a b c d e)) '(e))
(check-expect (drop 5 '(a b c d e)) '())
(check-expect (drop 6 '(a b c d e)) '())
(check-expect (drop 7 '(a b c d e)) '())

;; test-C-interleave.scm
(check-expect (interleave '(a b c) '(d e f)) '(a d b e c f))
(check-expect (interleave '(a b c d) '(e f)) '(a e b f c d))
(check-expect (interleave '(a b) '(c d e f)) '(a c b d e f))
(check-expect (interleave '() '()) '())
(check-expect (interleave '(a b) '()) '(a b))
(check-expect (interleave '() '(d e)) '(d e))
(check-expect (interleave '(1 2 3 4 5) '(a b c d e)) '(1 a 2 b 3 c 4 d 5 e))

;; test-D-permutation?.scm
(check-expect (permutation? '() '()) #t)
(check-expect (permutation? '(a) '()) #f)
(check-expect (permutation? '() '(a)) #f)
(check-expect (permutation? '(a) '(a)) #t)
(check-expect (permutation? '(a b c) '(a b c)) #t)
(check-expect (permutation? '(a c b) '(a b c)) #t)
(check-expect (permutation? '(b a c) '(a b c)) #t)
(check-expect (permutation? '(b c a) '(a b c)) #t)
(check-expect (permutation? '(c a b) '(a b c)) #t)
(check-expect (permutation? '(c b a) '(a b c)) #t)
(check-expect (permutation? '(a b c d) '(a b c)) #f)
(check-expect (permutation? '(a b c) '(a b c d)) #f)
(check-expect (permutation? '(a a a) '(a a a)) #t)
(check-expect (permutation? '(a a) '(a a a)) #f)
(check-expect (permutation? '(a a a) '(a a)) #f)
(check-expect (permutation? '(a b c d e) '(b d c a e)) #t)
(check-expect (permutation? '(a b c d e) '(b c a d)) #f)
(check-expect (permutation? '(a b) '(a b a b)) #f)
(check-expect (permutation? '(a b a b) '(a b)) #f)
(check-expect (permutation? '(a b a b) '(a a b b)) #t)
(check-expect (permutation? '(a b a b) '(a b b a)) #t)
(check-expect (permutation? '(a b a b) '(a a a b)) #f)
(check-expect (permutation? '(a b a b) '(b b b a)) #f)

;; test-Ea-takewhile.scm
(check-expect (takewhile negative? '()) '())
(check-expect (takewhile negative? '(-4 -3 -2 -1 0 1 2 3 4)) '(-4 -3 -2 -1))
(check-expect (takewhile negative? '(-4 -3 -2 -1)) '(-4 -3 -2 -1))
(check-expect (takewhile positive? '()) '())
(check-expect (takewhile positive? '(-4 -3 -2 -1 0 1 2 3 4)) '())
(check-expect (takewhile positive? '(-4 -3 -2 -1)) '())
(check-expect (takewhile odd? '()) '())
(check-expect (takewhile odd? '(-4 -3 -2 -1 0 1 2 3 4)) '())
(check-expect (takewhile odd? '(-4 -3 -2 -1)) '())
(check-expect (takewhile even? '()) '())
(check-expect (takewhile even? '(-4 -3 -2 -1 0 1 2 3 4)) '(-4))
(check-expect (takewhile even? '(-4 -3 -2 -1)) '(-4))

;; test-Eb-dropwhile.scm
(check-expect (dropwhile negative? '()) '())
(check-expect (dropwhile negative? '(-4 -3 -2 -1 0 1 2 3 4)) '(0 1 2 3 4))
(check-expect (dropwhile negative? '(-4 -3 -2 -1)) '())
(check-expect (dropwhile positive? '()) '())
(check-expect (dropwhile positive? '(-4 -3 -2 -1 0 1 2 3 4)) '(-4 -3 -2 -1 0 1 2 3 4))
(check-expect (dropwhile positive? '(-4 -3 -2 -1)) '(-4 -3 -2 -1))
(check-expect (dropwhile odd? '()) '())
(check-expect (dropwhile odd? '(-4 -3 -2 -1 0 1 2 3 4)) '(-4 -3 -2 -1 0 1 2 3 4))
(check-expect (dropwhile odd? '(-4 -3 -2 -1)) '(-4 -3 -2 -1))
(check-expect (dropwhile even? '()) '())
(check-expect (dropwhile even? '(-4 -3 -2 -1 0 1 2 3 4)) '(-3 -2 -1 0 1 2 3 4))
(check-expect (dropwhile even? '(-4 -3 -2 -1)) '(-3 -2 -1))

;; test-F-arg-max.scm
(check-expect (arg-max (lambda (x) (* (+ x 3) (+ x 3))) '(-5 -4 -3 -2 -1 0 1 2 3 4 5)) 5)
(check-expect (arg-max (lambda (x) (* (+ x 3) (+ x 3))) '(0)) 0)
(check-expect (arg-max (lambda (x) (* x x)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5)) -5)
(check-expect (arg-max (lambda (x) (* x x)) '(0)) 0)
(check-expect (arg-max (lambda (x) (* (- x 2) (+ x 2))) '(-5 -4 -3 -2 -1 0 1 2 3 4 5)) -5)
(check-expect (arg-max (lambda (x) (* (- x 2) (+ x 2))) '(0)) 0)
(check-expect (arg-max length '((a b c) (d e f) (g h i))) '(a b c))
(check-expect (arg-max length '(() (a b c) (z y) (d e f) (x w) (g h i) (v u))) '(a b c))
(check-expect (arg-max length '((a b c))) '(a b c))
(check-expect (arg-max (lambda (x) (if x 1 -1)) '(#f #t #f #t)) #t)
(check-expect (arg-max (lambda (x) (if x 1 -1)) '(#t #f #t #f)) #t)
(check-expect (arg-max (lambda (x) (if x 1 -1)) '(a b c d)) 'a)
(check-expect (arg-max (lambda (x) (if x 1 -1)) '(a)) 'a)
(check-expect (arg-max (lambda (x) (- 0 (length x))) '((a b c) (d e f) (g h i))) '(a b c))
(check-expect (arg-max (lambda (x) (- 0 (length x))) '(() (a b c) (z y) (d e f) (x w) (g h i) (v u))) '())
(check-expect (arg-max (lambda (x) (- 0 (length x))) '((a b c))) '(a b c))
(check-expect (arg-max (lambda (x) (+ -2147483648 (length x))) '((a b c) (d e f) (g h i))) '(a b c))
(check-expect (arg-max (lambda (x) (+ -2147483648 (length x))) '(() (a b c) (z y) (d e f) (x w) (g h i) (v u))) '(a b c))
(check-expect (arg-max (lambda (x) (+ -2147483648 (length x))) '((a b c))) '(a b c))

;; test-Gb-max*.scm
(check-expect (max* '(1 2 3 4 5)) 5)
(check-expect (max* '(5 4 3 2 1)) 5)
(check-expect (max* '(2 1 5 4 3)) 5)
(check-expect (max* '(2 4 6 8 10)) 10)
(check-expect (max* '(10 8 6 4 2)) 10)
(check-expect (max* '(4 2 10 8 6)) 10)
(check-expect (max* '(20 20 20)) 20)
(check-expect (max* '(42)) 42)
(check-expect (max* '(-1 -2 -3 -4 -5)) -1)
(check-expect (max* '(-5 -4 -3 -2 -1)) -1)
(check-expect (max* '(-2 -1 -5 -4 -3)) -1)
(check-expect (max* '(-2 -4 -6 -8 -10)) -2)
(check-expect (max* '(-10 -8 -6 -4 -2)) -2)
(check-expect (max* '(-4 -2 -10 -8 -6)) -2)
(check-expect (max* '(-20 -20 -20)) -20)
(check-expect (max* '(-42)) -42)

;; test-Gc-gcd*.scm
(check-expect (gcd* '(1 2 3 4 5)) 1)
(check-expect (gcd* '(5 4 3 2 1)) 1)
(check-expect (gcd* '(2 1 5 4 3)) 1)
(check-expect (gcd* '(2 4 6 8 10)) 2)
(check-expect (gcd* '(10 8 6 4 2)) 2)
(check-expect (gcd* '(4 2 10 8 6)) 2)
(check-expect (gcd* '(20 20 20)) 20)
(check-expect (gcd* '(42)) 42)
(check-expect (gcd* '(3 5 7 9)) 1)
(check-expect (gcd* '(9 7 5 3)) 1)

;; test-Gg-append-via-fold.scm
(check-expect (append-via-fold '() '()) '())
(check-expect (append-via-fold '(a) '()) '(a))
(check-expect (append-via-fold '() '(z)) '(z))
(check-expect (append-via-fold '(a) '(z)) '(a z))
(check-expect (append-via-fold '(a b c) '()) '(a b c))
(check-expect (append-via-fold '() '(x y z)) '(x y z))
(check-expect (append-via-fold '(a b c) '(x y z)) '(a b c x y z))

;; test-Gi-reverse-via-fold.scm
(check-expect (reverse-via-fold '()) '())
(check-expect (reverse-via-fold '(a)) '(a))
(check-expect (reverse-via-fold '(a b c)) '(c b a))
(check-expect (reverse-via-fold '(a b c x y z)) '(z y x c b a))

;; test-Gj-insertion-sort.scm
(check-expect (insertion-sort '()) '())
(check-expect (insertion-sort '(1)) '(1))
(check-expect (insertion-sort '(1 2 3)) '(1 2 3))
(check-expect (insertion-sort '(3 2 1)) '(1 2 3))
(check-expect (insertion-sort '(1 5 2 4 3)) '(1 2 3 4 5))
(check-expect (insertion-sort '(89 38 79 44 29 66 51 92)) '(29 38 44 51 66 79 89 92))
(check-expect (insertion-sort '(34 63 80 29 18 67 84 65 42 11 4 41 82 95 64 9 62 95 40 17 34)) '(4 9 11 17 18 29 34 34 40 41 42 62 63 64 65 67 80 82 84 95 95))
(check-expect (insertion-sort '(56 65 70 67 88 29 98 39 36 9 66 27)) '(9 27 29 36 39 56 65 66 67 70 88 98))
(check-expect (insertion-sort '(5 50 55 4 41)) '(4 5 41 50 55))
(check-expect (insertion-sort '(99 48 17 14 83 8 9 94 83 84 17 66 99 76 41 2 55 8)) '(2 8 8 9 14 17 17 41 48 55 66 76 83 83 84 94 99 99))
(check-expect (insertion-sort '(30 27 56 85 98 15 44 5 82 43 48 41 6 87 68 93 46 47 28 85 26)) '(5 6 15 26 27 28 30 41 43 44 46 47 48 56 68 82 85 85 87 93 98))
(check-expect (insertion-sort '(4 93 98 87 20 17 34 19 52 81 62 91 0 61 30 3 64 81 14)) '(0 3 4 14 17 19 20 30 34 52 61 62 64 81 81 87 91 93 98))
(check-expect (insertion-sort '(68 17 38 75 12 69 78 35 72 61 58 35)) '(12 17 35 35 38 58 61 68 69 72 75 78))
(check-expect (insertion-sort '(69 30 51 40 17 66 7 72 57 94 79 20 61 62 67 8 57)) '(7 8 17 20 30 40 51 57 57 61 62 66 67 69 72 79 94))
(check-expect (insertion-sort '(95 12 93 70 39 32 45 10 23 92 37 90 23 68 45 62 39 84)) '(10 12 23 23 32 37 39 39 45 45 62 68 70 84 90 92 93 95))

;; test-H1-add-element.scm
(val set-ex1 emptyset)
(val set-ex2 even?)
(val set-ex3 odd?)
(val set-ex4 negative?)
(val set-ex5 zero?)
(val set-ex6 positive?)
(val set-ex7 (lambda (x) (exists? ((curry =) x) '(-1 3 5 9 13))))

(check-expect (let ((s (add-element 3 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #t #f #f))
(check-expect (let ((s (add-element 3 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #f #t #f #t #t #t #f))
(check-expect (let ((s (add-element 3 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #f #t #f #t #f #t))
(check-expect (let ((s (add-element 3 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #f #f #f #t #f #f))
(check-expect (let ((s (add-element 3 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #t #f #f #t #f #f))
(check-expect (let ((s (add-element 3 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #t #t #t #t #t))
(check-expect (let ((s (add-element 3 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #t #f #f #f #t #f #t))
(check-expect (let ((s (add-element -3 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #t #f #f #f #f #f #f #f #f))
(check-expect (let ((s (add-element -3 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #t #t #f #t #f #t #f #t #f))
(check-expect (let ((s (add-element -3 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #f #t #f #t #f #t))
(check-expect (let ((s (add-element -3 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #f #f #f #f #f #f))
(check-expect (let ((s (add-element -3 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #t #f #f #t #f #f #f #f #f))
(check-expect (let ((s (add-element -3 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #t #f #f #f #t #t #t #t #t))
(check-expect (let ((s (add-element -3 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #t #f #t #f #f #f #t #f #t))

;; test-H2-union.scm
(val set-ex1 emptyset)
(val set-ex2 even?)
(val set-ex3 odd?)
(val set-ex4 negative?)
(val set-ex5 zero?)
(val set-ex6 positive?)
(val set-ex7 (lambda (x) (exists? ((curry =) x) '(-1 3 5 9 13))))

(check-expect (let ((s (union set-ex1 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (union set-ex1 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #f #t #f #t #f #t #f))
(check-expect (let ((s (union set-ex1 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #f #t #f #t #f #t))
(check-expect (let ((s (union set-ex1 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #f #f #f #f #f #f))
(check-expect (let ((s (union set-ex1 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #t #f #f #f #f #f))
(check-expect (let ((s (union set-ex1 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #t #t #t #t #t))
(check-expect (let ((s (union set-ex1 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #t #f #f #f #t #f #t))
(check-expect (let ((s (union set-ex2 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #f #t #f #t #f #t #f))
(check-expect (let ((s (union set-ex2 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #f #t #f #t #f #t #f))
(check-expect (let ((s (union set-ex2 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #t #t #t #t #t #t))
(check-expect (let ((s (union set-ex2 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #t #f #t #f #t #f))
(check-expect (let ((s (union set-ex2 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #f #t #f #t #f #t #f))
(check-expect (let ((s (union set-ex2 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #f #t #t #t #t #t #t))
(check-expect (let ((s (union set-ex2 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #t #t #f #t #t #t #t))
(check-expect (let ((s (union set-ex3 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #f #t #f #t #f #t))
(check-expect (let ((s (union set-ex3 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #t #t #t #t #t #t))
(check-expect (let ((s (union set-ex3 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #f #t #f #t #f #t))
(check-expect (let ((s (union set-ex3 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #f #t #f #t #f #t))
(check-expect (let ((s (union set-ex3 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #t #t #f #t #f #t))
(check-expect (let ((s (union set-ex3 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #f #t #t #t #t #t))
(check-expect (let ((s (union set-ex3 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #f #t #f #t #f #t))
(check-expect (let ((s (union set-ex4 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #f #f #f #f #f #f))
(check-expect (let ((s (union set-ex4 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #t #f #t #f #t #f))
(check-expect (let ((s (union set-ex4 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #f #t #f #t #f #t))
(check-expect (let ((s (union set-ex4 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #f #f #f #f #f #f))
(check-expect (let ((s (union set-ex4 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #t #f #f #f #f #f))
(check-expect (let ((s (union set-ex4 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #f #t #t #t #t #t))
(check-expect (let ((s (union set-ex4 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #f #f #f #t #f #t))
(check-expect (let ((s (union set-ex5 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #t #f #f #f #f #f))
(check-expect (let ((s (union set-ex5 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #f #t #f #t #f #t #f))
(check-expect (let ((s (union set-ex5 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #t #t #f #t #f #t))
(check-expect (let ((s (union set-ex5 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #t #f #f #f #f #f))
(check-expect (let ((s (union set-ex5 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #t #f #f #f #f #f))
(check-expect (let ((s (union set-ex5 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #t #t #t #t #t #t))
(check-expect (let ((s (union set-ex5 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #t #t #f #f #t #f #t))
(check-expect (let ((s (union set-ex6 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #t #t #t #t #t))
(check-expect (let ((s (union set-ex6 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #f #t #t #t #t #t #t))
(check-expect (let ((s (union set-ex6 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #f #t #t #t #t #t))
(check-expect (let ((s (union set-ex6 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #f #t #t #t #t #t))
(check-expect (let ((s (union set-ex6 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #t #t #t #t #t #t))
(check-expect (let ((s (union set-ex6 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #t #t #t #t #t))
(check-expect (let ((s (union set-ex6 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #t #f #t #t #t #t #t))
(check-expect (let ((s (union set-ex7 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #t #f #f #f #t #f #t))
(check-expect (let ((s (union set-ex7 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #t #t #f #t #t #t #t))
(check-expect (let ((s (union set-ex7 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #f #t #f #t #f #t))
(check-expect (let ((s (union set-ex7 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #f #f #f #t #f #t))
(check-expect (let ((s (union set-ex7 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #t #t #f #f #t #f #t))
(check-expect (let ((s (union set-ex7 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #t #f #t #t #t #t #t))
(check-expect (let ((s (union set-ex7 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #t #f #f #f #t #f #t))

;; test-H3-inter.scm
(val set-ex1 emptyset)
(val set-ex2 even?)
(val set-ex3 odd?)
(val set-ex4 negative?)
(val set-ex5 zero?)
(val set-ex6 positive?)
(val set-ex7 (lambda (x) (exists? ((curry =) x) '(-1 3 5 9 13))))

(check-expect (let ((s (inter set-ex1 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex1 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex1 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex1 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex1 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex1 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex1 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex2 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex2 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #f #t #f #t #f #t #f))
(check-expect (let ((s (inter set-ex2 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex2 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex2 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #t #f #f #f #f #f))
(check-expect (let ((s (inter set-ex2 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #t #f #t #f))
(check-expect (let ((s (inter set-ex2 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex3 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex3 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex3 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #f #t #f #t #f #t))
(check-expect (let ((s (inter set-ex3 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex3 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex3 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #t #f #t #f #t))
(check-expect (let ((s (inter set-ex3 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #t #f #f #f #t #f #t))
(check-expect (let ((s (inter set-ex4 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex4 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex4 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex4 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex4 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex4 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex4 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #t #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex5 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex5 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #t #f #f #f #f #f))
(check-expect (let ((s (inter set-ex5 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex5 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex5 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #t #f #f #f #f #f))
(check-expect (let ((s (inter set-ex5 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex5 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex6 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex6 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #t #f #t #f))
(check-expect (let ((s (inter set-ex6 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #t #f #t #f #t))
(check-expect (let ((s (inter set-ex6 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex6 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex6 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #t #t #t #t #t))
(check-expect (let ((s (inter set-ex6 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #t #f #t))
(check-expect (let ((s (inter set-ex7 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex7 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex7 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #t #f #f #f #t #f #t))
(check-expect (let ((s (inter set-ex7 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #t #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex7 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (inter set-ex7 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #t #f #t))
(check-expect (let ((s (inter set-ex7 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #t #f #f #f #t #f #t))

;; test-H4-diff.scm
(val set-ex1 emptyset)
(val set-ex2 even?)
(val set-ex3 odd?)
(val set-ex4 negative?)
(val set-ex5 zero?)
(val set-ex6 positive?)
(val set-ex7 (lambda (x) (exists? ((curry =) x) '(-1 3 5 9 13))))

(check-expect (let ((s (diff set-ex1 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex1 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex1 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex1 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex1 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex1 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex1 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex2 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #f #t #f #t #f #t #f))
(check-expect (let ((s (diff set-ex2 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex2 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #f #t #f #t #f #t #f))
(check-expect (let ((s (diff set-ex2 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #t #f #t #f #t #f))
(check-expect (let ((s (diff set-ex2 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #f #f #f #t #f #t #f))
(check-expect (let ((s (diff set-ex2 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #f #t #f #f #f #f #f))
(check-expect (let ((s (diff set-ex2 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #f #t #f #t #f #t #f))
(check-expect (let ((s (diff set-ex3 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #f #t #f #t #f #t))
(check-expect (let ((s (diff set-ex3 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #f #t #f #t #f #t))
(check-expect (let ((s (diff set-ex3 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex3 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #t #f #t #f #t))
(check-expect (let ((s (diff set-ex3 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #f #t #f #t #f #t))
(check-expect (let ((s (diff set-ex3 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex3 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #f #f #t #f #f #f #f))
(check-expect (let ((s (diff set-ex4 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex4 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #f #t #f #t #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex4 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #t #f #t #f #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex4 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex4 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex4 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #t #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex4 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#t #t #t #t #f #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex5 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #t #f #f #f #f #f))
(check-expect (let ((s (diff set-ex5 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex5 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #t #f #f #f #f #f))
(check-expect (let ((s (diff set-ex5 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #t #f #f #f #f #f))
(check-expect (let ((s (diff set-ex5 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex5 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #t #f #f #f #f #f))
(check-expect (let ((s (diff set-ex5 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #t #f #f #f #f #f))
(check-expect (let ((s (diff set-ex6 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #t #t #t #t #t))
(check-expect (let ((s (diff set-ex6 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #t #f #t #f #t))
(check-expect (let ((s (diff set-ex6 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #t #f #t #f))
(check-expect (let ((s (diff set-ex6 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #t #t #t #t #t))
(check-expect (let ((s (diff set-ex6 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #t #t #t #t #t))
(check-expect (let ((s (diff set-ex6 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex6 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #t #t #f #t #f))
(check-expect (let ((s (diff set-ex7 set-ex1))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #t #f #f #f #t #f #t))
(check-expect (let ((s (diff set-ex7 set-ex2))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #t #f #f #f #t #f #t))
(check-expect (let ((s (diff set-ex7 set-ex3))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex7 set-ex4))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #t #f #t))
(check-expect (let ((s (diff set-ex7 set-ex5))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #t #f #f #f #t #f #t))
(check-expect (let ((s (diff set-ex7 set-ex6))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #t #f #f #f #f #f #f))
(check-expect (let ((s (diff set-ex7 set-ex7))) (map (lambda (x) (member? x s)) '(-5 -4 -3 -2 -1 0 1 2 3 4 5))) '(#f #f #f #f #f #f #f #f #f #f #f))

;; test-I-clamp.scm
(val fn-ex1 (lambda (x) (* 2 x)))
(val fn-ex2 (lambda (x) (+ x 1)))
(val fn-ex3 (lambda (x) (+ (* x x) (+ x 1))))
(val fn-ex4 (let ((first #t)) (lambda (x) (if first (begin (set first #f) x) (error '(fn-ex4 called twice))))))

(check-expect ((clamp fn-ex1 -5 5) 2) 4)
(check-expect ((clamp fn-ex2 -5 5) 4) 5)
(check-expect ((clamp fn-ex2 0 5) 1) 2)
(check-expect ((clamp fn-ex2 0 5) -1) 0)
(check-expect ((clamp fn-ex2 0 5) 99) 5)
(check-expect ((clamp fn-ex2 0 5) -99) 0)
(check-expect ((clamp fn-ex3 0 5) 1) 3)
(check-expect ((clamp fn-ex3 0 5) -1) 1)
(check-expect ((clamp fn-ex3 0 5) 99) 5)
(check-expect ((clamp fn-ex3 0 5) -99) 5)
(check-expect ((clamp fn-ex4 0 5) 2) 2)

;; test-J-balanced?.scm
(val l-g (lambda (x y) (and (= x '<) (= y '>))))
(val t-f (lambda (x y) (and (= x #t) (= y #f))))
(val n-p (lambda (x y) (and (and (number? x) (number? y)) (and (< x 0) (= (- 0 x) y)))))

(check-expect (balanced? l-g '()) #t)
(check-expect (balanced? l-g '(<)) #f)
(check-expect (balanced? l-g '(>)) #f)
(check-expect (balanced? l-g '(< <)) #f)
(check-expect (balanced? l-g '(< >)) #t)
(check-expect (balanced? l-g '(> <)) #f)
(check-expect (balanced? l-g '(> >)) #f)
(check-expect (balanced? l-g '(< < <)) #f)
(check-expect (balanced? l-g '(< > <)) #f)
(check-expect (balanced? l-g '(> < <)) #f)
(check-expect (balanced? l-g '(> > <)) #f)
(check-expect (balanced? l-g '(< < >)) #f)
(check-expect (balanced? l-g '(< > >)) #f)
(check-expect (balanced? l-g '(> < >)) #f)
(check-expect (balanced? l-g '(> > >)) #f)
(check-expect (balanced? l-g '(< < < <)) #f)
(check-expect (balanced? l-g '(< > < <)) #f)
(check-expect (balanced? l-g '(> < < <)) #f)
(check-expect (balanced? l-g '(> > < <)) #f)
(check-expect (balanced? l-g '(< < > <)) #f)
(check-expect (balanced? l-g '(< > > <)) #f)
(check-expect (balanced? l-g '(> < > <)) #f)
(check-expect (balanced? l-g '(> > > <)) #f)
(check-expect (balanced? l-g '(< < < >)) #f)
(check-expect (balanced? l-g '(< > < >)) #t)
(check-expect (balanced? l-g '(> < < >)) #f)
(check-expect (balanced? l-g '(> > < >)) #f)
(check-expect (balanced? l-g '(< < > >)) #t)
(check-expect (balanced? l-g '(< > > >)) #f)
(check-expect (balanced? l-g '(> < > >)) #f)
(check-expect (balanced? l-g '(> > > >)) #f)
(check-expect (balanced? l-g '(< < < > > < > > < >)) #t)
(check-expect (balanced? l-g '(< < < > > > > < >)) #f)
(check-expect (balanced? t-f '()) #t)
(check-expect (balanced? t-f '(#t)) #f)
(check-expect (balanced? t-f '(#f)) #f)
(check-expect (balanced? t-f '(#t #t)) #f)
(check-expect (balanced? t-f '(#t #f)) #t)
(check-expect (balanced? t-f '(#f #t)) #f)
(check-expect (balanced? t-f '(#f #f)) #f)
(check-expect (balanced? t-f '(#t #t #t)) #f)
(check-expect (balanced? t-f '(#t #f #t)) #f)
(check-expect (balanced? t-f '(#f #t #t)) #f)
(check-expect (balanced? t-f '(#f #f #t)) #f)
(check-expect (balanced? t-f '(#t #t #f)) #f)
(check-expect (balanced? t-f '(#t #f #f)) #f)
(check-expect (balanced? t-f '(#f #t #f)) #f)
(check-expect (balanced? t-f '(#f #f #f)) #f)
(check-expect (balanced? t-f '(#t #t #t #t)) #f)
(check-expect (balanced? t-f '(#t #f #t #t)) #f)
(check-expect (balanced? t-f '(#f #t #t #t)) #f)
(check-expect (balanced? t-f '(#f #f #t #t)) #f)
(check-expect (balanced? t-f '(#t #t #f #t)) #f)
(check-expect (balanced? t-f '(#t #f #f #t)) #f)
(check-expect (balanced? t-f '(#f #t #f #t)) #f)
(check-expect (balanced? t-f '(#f #f #f #t)) #f)
(check-expect (balanced? t-f '(#t #t #t #f)) #f)
(check-expect (balanced? t-f '(#t #f #t #f)) #t)
(check-expect (balanced? t-f '(#f #t #t #f)) #f)
(check-expect (balanced? t-f '(#f #f #t #f)) #f)
(check-expect (balanced? t-f '(#t #t #f #f)) #t)
(check-expect (balanced? t-f '(#t #f #f #f)) #f)
(check-expect (balanced? t-f '(#f #t #f #f)) #f)
(check-expect (balanced? t-f '(#f #f #f #f)) #f)
(check-expect (balanced? t-f '(#t #t #t #f #f #t #f #f #t #f)) #t)
(check-expect (balanced? t-f '(#t #t #t #f #f #f #f #t #f)) #f)
(check-expect (balanced? n-p '(-2 -1 1 2)) #t)
(check-expect (balanced? n-p '(-2 -1 0 1 2)) #f)
(check-expect (balanced? n-p '(-1 -2 2 1)) #t)
(check-expect (balanced? n-p '(-3 3 -2 -1 1 2 -3 3)) #t)
(check-expect (balanced? n-p '(-2 -2 -1 1 2 2)) #t)
(check-expect (balanced? n-p '(2 1 -1 -2)) #f)
(check-expect (balanced? n-p '(-1 1 -1 1 -1 1 -1 1)) #t)
(check-expect (balanced? n-p '(-3 -2 -1)) #f)
(check-expect (balanced? n-p '(-3 3 -2 2 -1 1 -2 2 -3 3)) #t)

