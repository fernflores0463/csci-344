;; Name: Fernando Flores Hernandez
;; Time spent on assignment: 12 hrs approximately
;; Collaborators: 

[clause].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; standard number predicates

between(Low,High,Low) :- Low =< High.
between(Low,High,N) :- Low =< High, LowPlusOne is Low+1, between(LowPlusOne,High,N).

max(A,B,A) :- A >= B.
max(A,B,B) :- A < B.

min(A,B,A) :- A =< B.
min(A,B,B) :- A > B.

; standard list predicates

list(nil).
list(cons(H,T)) :- list(T).

null([]).
notnull([_|_]).

head([H|T], H).
tail([H|T], T).

last([X], X).
last([H|T], X) :- last(T, X).

length([], 0).
length([H|T], N) :- length(T, M), N is M + 1.

append([], YS, YS).
append([X|XS], YS, [X|ZS]) :- append(XS, YS, ZS).

member_rec(X, [X|T]).
member_rec(X, [H|T]) :- member_rec(X, T).

member_via_append(X,L) :- append(_, [X|_], L).

member(X, L) :- member_rec(X, L).

snoc([], X, [X]).
snoc([H|T], X, [H|T_X]) :- snoc(T, X, T_X).

reverseA([], []).
reverseA([H|T], TR_H) :- reverseA(T, TR), snoc(TR, H, TR_H).

reverseB([], []).
reverseB([H|T], LR) :- reverseB(T,TR), append(TR,[H],LR).

revappendC([], L, L).
revappendC([H|T], L2, L3) :- revappendC(T, [H|L2], L3).
reverseC(L, LR) :- revappendC(L, [], LR).

reverse(L, LR) :- reverseA(L, LR).

palindrome(L) :- reverse(L, L).

zip([], YS, []).
zip(XS, [], []).
zip([X|XS], [Y|YS], [pair(X,Y)|ZS]) :- zip(XS, YS, ZS).

permutation([], []).
permutation(L, [H|T]) :- append(XS, [H|YS], L), append (XS, YS, ZS), permutation(ZS, T).

ordered([]).
ordered([A]).
ordered([A,B|L]) :- A =< B, ordered([B|L]).

naive_sort(L,SL) :- permutation(L,SL), ordered(SL).

partition(Pivot, [A|XS], [A|YS], ZS) :- A =< Pivot, partition(Pivot, XS, YS, ZS).
partition(Pivot, [A|XS], YS, [A|ZS]) :- Pivot < A,  partition(Pivot, XS, YS, ZS).
partition(Pivot, [], [], []).

quicksorted([], []).
quicksorted([X|XS], SL) :-
  partition(X, XS, Lows, Highs),
  quicksort(Lows, SLows), quicksorted(Highs, SHighs),
  appended(SLows, [X|SHighs], SL).

ofLength(0, []).
ofLength(N, [H|T]) :- N >= 1, M is N - 1, ofLength(M, T).

; predicates useful for puzzles

eqInList(X, X, L) :- member(X, L).
neqInList(X, Y, L) :- append(L1, [X|L2], L), member(Y, L1).
neqInList(X, Y, L) :- append(L1, [X|L2], L), member(Y, L2).
adjInList(X, Y, L) :- append(L1, [X,Y|L2], L).
adjInList(X, Y, L) :- append(L1, [Y,X|L2], L).
nadjInList(X, Y, L) :- append(L1, [Z,X|L2], L), member(Y, L1).
nadjInList(X, Y, L) :- append(L1, [X,Z|L2], L), member(Y, L2).
ltInList(X, Y, L) :- append(L1, [X|L2], L), member(Y, L2).
gtInList(X, Y, L) :- append(L1, [X|L2], L), member(Y, L1).

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part A (sum)

;; DEFINE sum HERE

sum([], 0).
sum([H|T], N) :- sum(T, L), 
                 N is H + L. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part B (prod)

;; DEFINE prod HERE

prod([], 1).
prod([H|T], N) :- prod(T, L), N is H * L.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part C (avg)

;; DEFINE avg HERE

avg(L, N):- sum(L, T),
            length(L, M ),
            M > 0, 
            N is T / M.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part D (swizzle)

;; DEFINE swizzle HERE
swizzle([],[],[]).
swizzle([],L2,L2).
swizzle(L1,[],L1).
swizzle([L1_h|L1_t], [L2_h|L2_t], [L1_h,L2_h|L3]):- swizzle(L1_t,L2_t,L3).

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part E (partition)

;; DEFINE partition HERE

partition([],[]).
partition(L, [[X|Xs]|Zs]) :- append([X|Xs], Ys, L),
                             partition(Ys, Zs).


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part F (balanced_partition) !bonus!

;; DEFINE balanced_partition HERE


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part G (msort)

;; DEFINE msort HERE

splice([],[],[]).
splice([N],[N],[]).

splice([A | [B|R]], [A | L1], [B | L2]) :- split(R, L1, L2). 

merge([], L2, L2).
merge([A|R1], [], [A|R1]).
merge([A|R1], [B|R2], [A|Ans]) :- A < B, 
                                merge(R1, [B|R2], Ans).
merge([A|R1], [B|R2], [B|Ans]) :- A >= B, 
                                  merge([A | R1], R2, Ans).

msort([],[]).
msort([N],[N]).
msort([F| [S |R]],Ans) :- splice([F| [S | R]],L1,L2),
                          msort(L1,A1), 
                          msort(L2,A2),
                          merge(A1,A2,Ans).


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part H (btreeHeight)

;; DEFINE btreeHeight HERE

btreeHeight(leaf, 0).

btreeHeight(node(Left, Root, Right), N) :- btreeHeight(Left, N_CURR),
                                           btreeHeight(Right, N_CURR_R),
                                           max(N_CURR, N_CURR_R, A),
                                           N is A + 1.



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part I (btreeHighest)

;; DEFINE btreeHighest HERE


btreeHighest(node(L, X, R), X) :- btreeHeight(L, 0), 
                                  btreeHeight(R, 0).


btreeHighest(node(L, X, R), Y) :- btreeHeight(Left, L_Hght), 
                                  btreeHeight(Right, R_Hght), 
                                  max(L_Hght,R_Hght,L_Hght), 
                                  btreeHighest(L, Y).


btreeHighest(node(L, X, R), Y) :- btreeHeight(L, L_Hght), 
                                  btreeHeight(R, R_Hght), 
                                  max(L_Hght,R_Hght,R_Hght), 
                                  btreeHighest(R, Y).

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part J (btreeInternal)

;; DEFINE btreeInternal HERE

;;Decomposes tree further so we can look in
decompose_tree_helper(N, N).
decompose_tree_helper(node(L,Root,R), leaf).

decompose_tree_helper(node(L, Root, R),
                      node(CL, Root, CRN)) :- decompose_tree_helper(L,CL), 
                                              decompose_tree_helper(R,CRN).

btreeInternal(N,N).
btreeInternal(node(L,Root,R), leaf).

btreeInternal(node(L,Root,R),
              node(Internal_L,Root,Internal_R)) :- decompose_tree_helper(L,Internal_L), 
                                                 decompose_tree_helper(R,Internal_R).

btreeInternal(node(L, Root, R), Internal_R) :- btreeInternal(R, Internal_R).

btreeInternal(node(L, Root, R), Internal_L) :- btreeInternal(L, Internal_L).

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part K (puzzle_soln)
;;I wasn't able to find this one out
;; DEFINE puzzle_soln HERE

; Alex, Bret, Chris, Derek, Eddie, Fred, Greg, Harold, and John are
; nine students who live in a three storey building, with three rooms
; on each floor. A room in the West wing, one in the centre, and one
; in the East wing. If you look directly at the building, the left
; side is West and the right side is East. Each student is assigned
; exactly one room.
;
; 1. Harold does not live on the bottom floor.
; 2. Fred lives directly above John and directly next to Bret (who lives in the West wing).
; 3. Eddie lives in the East wing and one floor higher than Fred.
; 4. Derek lives directly above Fred. (above(Dereck, Fred))
; 5. Greg lives directly above Chris. (above(Greg, Fred) )
;
; Can you find where each of their rooms is?

lives(S,R,F,B) :- studentLivesInRoomOnFloorOfBldg(S,R,F,B).
studentLivesInRoomOnFloorOfBldg(S,R,bottom,building(F,_,_)) :- studentLivesInRoomOnFloor(S,R,F).
studentLivesInRoomOnFloorOfBldg(S,R,middle,building(_,F,_)) :- studentLivesInRoomOnFloor(S,R,F).
studentLivesInRoomOnFloorOfBldg(S,R,top,building(_,_,F)) :- studentLivesInRoomOnFloor(S,R,F).
studentLivesInRoomOnFloor(S,west,floor(S,_,_)).
studentLivesInRoomOnFloor(S,center,floor(_,S,_)).
studentLivesInRoomOnFloor(S,east,floor(_,_,S)).

rooms([west,center,east]).
floors([bottom,middle,top]).

above(dereck, fred).
above(greg, fred).

lives(dereck, R, top,  BLDG).
lives(fred,   R, middle, BLDG).
lives(john,   R, bottom, BLDG).
;;puzzle_soln(BLDG)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part L (re_match)

;; DEFINE re_match HERE

re_match(epsilon, []).
re_match(star(X), []).
re_match(char(R), [R]).
re_match(RE, L) :- RE == L, append(RE, X, X).

re_match(star(R), L1) :- append([H|T], L2, L1),
                         re_match(star(R), L2),
                         re_match(R, [H|T]).

re_match(seq(R1, R2), L1) :- append(N, L2, L1), 
                             re_match(R1, N), 
                             re_match(R2, L2).

re_match(alt(R1, R2), L1) :- re_match(R1, L1).
re_match(alt(R1, R2), L1) :- re_match(R2, L1).

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part M (re_reverse) !bonus!

;; DEFINE re_reverse HERE


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Example binary trees, for tests.
btreeEx01(leaf).
btreeEx02(node(leaf,99,leaf)).
btreeEx03(node(node(leaf,9,leaf),99,node(leaf,999,leaf))).
btreeEx04(node(node(node(leaf,9,leaf),20,leaf),30,node(node(leaf,99,leaf),33,node(leaf,1000,leaf)))).
btreeEx05(node(node(node(leaf,9,leaf),99,node(leaf,999,leaf)),9999,node(node(leaf,9,leaf),99,node(leaf,999,leaf)))).
btreeEx06(node(leaf,5,node(leaf,4,node(leaf,3,node(leaf,2,node(leaf,1,node(leaf,0,leaf))))))).
btreeEx07(node(leaf,567,node(leaf,208,node(node(leaf,509,leaf),-442,leaf)))).
btreeEx08(node(leaf,525,node(leaf,609,leaf))).
btreeEx09(node(leaf,468,node(node(node(leaf,873,node(leaf,315,node(leaf,825,node(leaf,54,node(leaf,885,leaf))))),-34,node(leaf,248,leaf)),-66,node(leaf,456,leaf)))).
btreeEx10(node(node(leaf,-696,leaf),-930,node(leaf,208,node(leaf,-364,node(node(leaf,484,leaf),-1003,node(node(node(leaf,189,node(node(node(leaf,-75,leaf),214,leaf),872,leaf)),0,node(leaf,-450,leaf)),937,leaf)))))).
btreeEx11(node(node(node(leaf,3,leaf),3,node(leaf,3,leaf)),3,node(node(leaf,3,leaf),3,node(leaf,3,leaf)))).

[query].
